# The main "setup" workflow, that calls other workflows.
name: Docker Images Build

on: [push]

permissions:
  contents: read

# Agent Docker image tests
#
# To test this workflow with your branch, make the following changes:
#
# 1. In this workflow, change ``@master`` to ``@your_branch_name`` - e.g. ``@docker_image_alpine``

# 2. In this workflow, change docker hub secrets to utilize testing and not prod account so images
#    get pushed to testing account. Change ``_PROD_` in the secret name to ``_TEST``,
#    e.g. ``DOCKER_HUB_USERNAME_TEST_ACCOUNT`` ``DOCKER_HUB_PASSWORD_TEST_ACCOUNT``.
#    Images for test account will get pushed to https://hub.docker.com/r/test4scalyr/.
#
# 3. In the job 'publish-images' below, change 'refs/heads/improve-caching-test' in the job conditional to you current branch.:
#
# For example: https://github.com/scalyr/scalyr-agent-2/pull/804/commits/0eccf278623552b51d9289d75a47794e88f02862
jobs:
  pre-job:
    runs-on: ubuntu-20.04
    outputs:
      pre-built-cached-steps-matrix: ${{ steps.get-info.outputs.pre-built-cached-steps-matrix }}
      build-matrix-json: ${{ steps.get-info.outputs.build-matrix-json }}
      test-matrix-json: ${{ steps.get-info.outputs.test-matrix-json }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8.13"

      - name: Execute the test environment deploy runner.
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: "agent_build.__init__.BuildTestEnvironment"

      - name: "Get build and test job matrices."
        id: get-info
        run: |
          set -e 
          echo "Test job matrix: "
          echo "$(python3 -m tests.end_to_end_tests.container_image_tests.k8s_test.k8s_test)"
          echo "::set-output name=test-matrix-json::$(python3 -m tests.end_to_end_tests.container_image_tests.k8s_test.k8s_test --extended)"
          python3 -m agent_build.scripts.prebuild_steps_on_cicd > pre_built_cached_steps_matrix.txt
          echo "::set-output name=pre-built-cached-steps-matrix::$(cat pre_built_cached_steps_matrix.txt)"

      - name: Determine if extended testing is needed
        run: |
          

#      - name: Cache checksum of the agent_build package in order to track and run tests on changes.
#        id: check-agent-build-changes
#        uses: actions/cache@v3
#        with:
#          path: prime-numbers
#          key: ${{ hashFiles('agent_build/**/*') }}
#
#      - name: Run agent_build tests.
#        if: steps.check-agent-build-changes.outputs.cache-hit != 'true'
#        run: |
#          pytest
#

  pre-build-cached-step:
    name: ${{ matrix.name }}
    needs:
      - pre-job

    runs-on: ${{ matrix.os }}
    strategy:
      # This job receives its matrix from the previous job. The matrix itself is created by the agent_build/scripts/prebuild_steps_on_cicd.py  module.
      # The matrix, for now, consists only from the 'include' part with following fields:
      #   "name": Name of the build job. (Not used in actiual build process, but just gives meaningful name to the job).
      #   "step-builder-fqdn": Fully qualified name of the builder class that has to run the cached step.
      #   "python-version": Version of python to setup on this runner. (NOTE: version of python used in images may differ, and it specified in the source code.)
      #   "os": Runner OS.
      matrix: ${{ fromJSON(needs.pre-job.outputs.pre-built-cached-steps-matrix) }}

    env:
      DOCKER_BUILDKIT: 1
      # Set this variable to tell the agent build code that it runs in CI/CD and it needs to use caching.
      AGENT_BUILD_IN_CICD: "1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0
        with:
          driver-opts: network=host

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Run cached step.
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: ${{ matrix.step-builder-fqdn }}

  build-images:
    name: Build image '${{ matrix.builder-name }}-${{ matrix.distro-name }}'.
    needs:
      - pre-job
      - pre-build-cached-step
    runs-on: ${{ matrix.os }}

    strategy:
#      # This job receives its matrix from the previous job. The matrix itself is created by the agent_build/package_builder.py module.
#      # The matrix, for now, consists only from the 'include' part with following fields:
#      #   "builder-name": name of the builder that builds the target images.
#      #   "distro-name": Name of the base distribution, e.g. debian, alpine on which base the resul images are built.
#      #   "python-version": Version of python to setup on this runner. (NOTE: version of python used in images may differ, and it specified in the source code.)
#      #   "os": Runner OS.
#      matrix: ${{ fromJSON(needs.pre-job.outputs.build-matrix-json) }}
      matrix:
        distro-name: [ "debian", "alpine" ]
        #distro-name: [ "debian"]
        builder-name:
          - docker-json
          - docker-syslog
          - docker-api
          - k8s
          - k8s-with-openmetrics
          - k8s-restart-agent-on-monitor-death

        os: [ "ubuntu-20.04" ]
        python-version: [ "3.8.13" ]

    env:
      DOCKER_BUILDKIT: 1
      # Set this variable to tell the agent build code that it runs in CI/CD and it needs to use caching.
      AGENT_BUILD_IN_CICD: "1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0
        with:
          driver-opts: network=host

      - name: Get fqdn of the builder '${{ matrix.builder-name }}'
        id: get-builder-fqdn
        run: |
          set -e
          echo "::set-output name=fqdn::$(python3 build_package_new.py ${{ matrix.builder-name }}-${{ matrix.distro-name }} --fqdn)"


      - name: Prepare everything what is needed by image builder '${{ matrix.builder-name }}-${{ matrix.distro-name }}'
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: ${{ steps.get-builder-fqdn.outputs.fqdn }}


      - name: Build image with builder '${{ matrix.builder-name }}-${{ matrix.distro-name }}'
        run: |
          python3 build_package_new.py ${{ matrix.builder-name }}-${{ matrix.distro-name }} \
            build --output-registry-dir /tmp/result

      - name: Save registry data root with result images as artifact.
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.builder-name }}-${{ matrix.distro-name }}-registry
          path: /tmp/result
          retention-days: 1


  test-k8s-images:
    needs:
      - build-images
      - pre-job
      - pre-build-cached-step
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      # This job receives its matrix from the preparation job. The matrix itself is created by the tests/end_to_end_tests/container_image_tests/k8s_test.py module.
      # The matrix, for now, consists only from the 'include' part with following fields:
      #   "pytest-params": String with all parameters for a particular test variant which then goes to "parametrize" test cases which has to be run there.
      #   "builder-name": name of the builder that builds the target image.
      #   "distro-name": Name of the base distribution, e.g. debian, alpine on which base the resul images are built.
      #   "result-tarball-name": filename of the result image tarball.
      #   "os": Runner's OS
      #   "python-version": Version of the python installed on runner.
      matrix: ${{ fromJSON(needs.pre-job.outputs.test-matrix-json) }}

    env:
      DOCKER_BUILDKIT: 1
      # Set this variable to tell the agent build code that it runs in CI/CD and it needs to use caching.
      AGENT_BUILD_IN_CICD: "1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Execute the test environment deploy runner.
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: "agent_build.__init__.BuildTestEnvironment"

      - name: Download registry with previously built image.
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.builder-name }}-registry
          path: /tmp/registry

#      - name: Spin up local registry to store result images.
#        run: |
#          docker run -d --rm --name registry -p 5000:5000 -v /tmp/result_registry:/var/lib/registry registry:2

      - name: Run tests
        shell: bash
        run: |
          python3 -m pytest  tests/end_to_end_tests/container_image_tests/k8s_test/k8s_test.py \
            -k ${{ matrix.pytest-params }} \
            --images-registry /tmp/registry \
            --scalyr-api-key ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }} \
            --scalyr-api-read-key ${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_SCALYR_READ_API_KEY }} \
            --test-session-suffix ${{ github.run_id }}-${{ github.run_attempt }} \

      - name: Notify Slack on Failure
        # NOTE: github.ref is set to pr ref (and not branch name, e.g. refs/pull/28/merge) for pull
        # requests and that's why we need this special conditional and check for github.head_ref in
        # case of PRs
        if: ${{ failure() && (github.ref == 'refs/heads/master' || github.head_ref == 'master') }}
        uses: act10ns/slack@87c73aef9f8838eb6feae81589a6b1487a4a9e08 # v1.6.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#cloud-tech'

  publish-images:
    if: ${{ github.ref == 'refs/heads/reorganise-docker-image-builders' || github.ref_type == 'tag' }}
    needs:
      - test-k8s-images
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        distro-name: [ "debian", "alpine" ]
        #distro-name: [ "debian" ]
        builder-name:
          - docker-json
          - docker-syslog
          - docker-api
          - k8s
          - k8s-restart-agent-on-monitor-death

        os: [ "ubuntu-20.04" ]
        python-version: [ "3.8.13" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download registry with previously built image.
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.builder-name }}-${{ matrix.distro-name }}-registry
          path: /tmp/registry

      - name: Publish image of the builder '${{ matrix.builder-name }}-${{ matrix.distro-name }}' using master branch commit sha '${{ github.sha }}'.
        if: github.ref_type == 'branch' && github.ref_name == 'reorganise-docker-image-builders'
        run: |
          python3 build_package_new.py ${{ matrix.builder-name }}-${{ matrix.distro-name }} \
            publish \
            --src-registry-data-dir /tmp/registry \
            --tags "${{ github.sha }}" \
            --user ${{ secrets.DOCKER_HUB_USERNAME_TEST_ACCOUNT }} \
            --dest-registry-creds "${{ secrets.DOCKER_HUB_USERNAME_TEST_ACCOUNT }}:${{ secrets.DOCKER_HUB_PASSWORD_TEST_ACCOUNT }}"


      - name: Get content of the VERSION file to match with current tag.
        if: github.ref_type == 'tag'
        id: version-file
        run: |
          echo "::set-output name=version::$(cat VERSION | tr -d '\n' | tr -d ' ')"

      - name: Publish image of the builder '${{ matrix.builder-name }}-${{ matrix.distro-name }}' using production tag '${{ github.ref_name }}'.
        if: github.ref_type == 'tag' && github.ref_name == 'v${{steps.version-file.outputs.version}}'
        run: |
          python3 build_package_new.py ${{ matrix.builder-name }}-${{ matrix.distro-name }} \
            publish \
            --src-registry-data-dir /tmp/registry \
            --tags "latest,${{ github.ref_name }}" \
            --user ${{ secrets.DOCKER_HUB_USERNAME_TEST_ACCOUNT }} \
            --dest-registry-creds "${{ secrets.DOCKER_HUB_USERNAME_TEST_ACCOUNT }}:${{ secrets.DOCKER_HUB_PASSWORD_TEST_ACCOUNT }}"
      
      
      
      


#    uses: scalyr/scalyr-agent-2/.github/workflows/publish-docker-images.yml@master
#    secrets:
#      SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
#      SCALYR_CLOUDTECH_TESTING_DEV_SCALYR_READ_API_KEY: ${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_SCALYR_READ_API_KEY }}
#      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME_TEST_ACCOUNT }}
#      DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD_TEST_ACCOUNT }}
