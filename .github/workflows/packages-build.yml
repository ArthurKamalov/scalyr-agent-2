name: Packages build

on: [push]

jobs:
#  unit-test:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-20.04, windows-2019, macos-10.15]
#        python: ["3.8"]
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Install python.
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.8.10'
#
#      - name: Prepare environment for the tests.
#        id: prepare
#        uses: ./.github/actions/prepare-environment
#        with:
#          name: 'test'
#
#      - name: Run unit tests.
#        shell: bash
#        run: |
#          python -m pytest ./tests/unit

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - package_type: "deb"
            #package_filename_glob: "scalyr-agent-2_*.*.*_all.deb"
            os: ubuntu-20.04
            python-version: "3.8"
          - package_type: "rpm"
            #package_filename_glob: "scalyr-agent-2-*.*.*-*.noarch.rpm"
            os: ubuntu-20.04
            python-version: "3.8"
#          - package_type: "tar"
#            #package_filename_glob: "scalyr-agent-*.*.*.tar.gz"
#            os: ubuntu-20.04
#            python-version: "3.8"
#          - package_type: "msi"
#            #package_filename_glob: "ScalyrAgentInstaller-*.*.*.msi"
#            os: windows-2019
#            python-version: "3.8"
#          - package_type: "k8s"
#            os: ubuntu-20.04
#            #package_filename_glob: "scalyr-agent-k8s-*.*.*"
#            python-version: "3.8"
#          - package_type: "docker-json"
#            os: ubuntu-20.04
#            #package_filename_glob: "scalyr-agent-docker-json-*.*.*"
#            python-version: "3.8"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.10'

#      - name: Calculate the checksum of the build dependencies.
#        shell: bash
#        run: |
#          python3 agent_build/build_package.py ${{ matrix.package_type }} dump-checksum checksum.txt
#
#      - name: Restore cached dependensies of the build environment if exists.
#        uses: actions/cache@v2
#        env:
#          cache-version: v1
#        with:
#          path: ~/dependencies_cache
#          key: ${{ runner.os }}-build-dependencies-${{ env.cache-version }}-${{ hashFiles('checksum.txt') }}
#
#      - name: Prepare build environment.
#        shell: bash
#        run: |
#          python3 agent_build/build_package.py ${{ matrix.package_type }} prepare-build-environment --cache-dir ~/dependencies_cache
#
#          # in some cases, the 'prepare-build-environment' command also generates file 'paths.txt'. This file contains paths
#          # to binaries of all tools that are needed for the build. Use this file to add those paths to the PATH env.
#          # variable to be able to use those tools.
#          if [ -f ~/dependencies_cache/paths.txt ]; then
#            cat ~/dependencies_cache/paths.txt >> $GITHUB_PATH
#          fi
#
#          # Remove checksum file, it is not needed anymore.
#          rm checksum.txt

      - id: get-deployer-name
        run: echo "::set-output name=deployer-name::$(python build_package.py get-build-spec ${{ matrix.package_type }} deployer)"

      - name: Prepare build environment by running appropriate deployer.
        id: prepare
        uses: ./.github/actions/prepare-environment
        with:
          name: ${{ steps.get-deployer-name.outputs.deployer-name }}

      - name: Build.
        id: build
        shell: bash
        run: |
          python build_package.py build ${{ matrix.package_type }} --output-dir agent-build-output
          echo "::set-output name=package-filename-glob::$(python build_package.py get-build-spec ${{ matrix.package_type }} package-filename-glob)"

      - name: Build tests frozen binaries.
        if: matrix.package_type == 'deb' || matrix.package_type == 'rpm' || matrix.package_type == 'tar' || matrix.package_type == 'msi'
        id: build-tests
        shell: bash
        run: |
          python build_package.py build ${{ matrix.package_type }} --build-tests --output-dir tests-build-output
          #echo "::set-output name=package-filename-glob::$(python build_package.py ${{ matrix.package_type }} package-filename-glob)"

      - name: Save the package.
        uses: actions/upload-artifact@v2
        with:
          name: "package-${{ matrix.package_type }}"
          path: |
            agent-build-output/${{ steps.build.outputs.package-filename-glob }}*



      - name: Save the frozen test script.
        uses: actions/upload-artifact@v2
        if: matrix.package_type != 'k8s' && matrix.package_type != 'docker-json'
        with:
          name: "package-test-${{ matrix.package_type }}"
          path: |
            tests-build-output/package_test_runner*






  package-test:
    needs: build
    runs-on: "ubuntu-20.04"
    strategy:
      matrix:
        target: ["ubuntu-1404", "ubuntu-1604", "ubuntu-1804", "ubuntu-2004", "centos-7", "centos-8", "amazonlinux-2"]
        python-version: [3.8]
        where: ["docker"]
#        include:
#          - target: "docker-json"
#            where: "locally"


    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.10'

      - name: Prepare environment for the tests.
        id: prepare
        uses: ./.github/actions/prepare-environment
        with:
          name: 'test'


      - name: "Get package file info"
        id: get-package-info
        run: |
          #echo "::set-output name=package-filename-glob::$(python build_package.py ${{ matrix.package_type }} package-filename-glob)"
          echo "::set-output name=package-type::$(python tests/package_tests/package_test_runner.py get ${{ matrix.target }} package-type)"

#      - name: "Get package type."
#        id: get-package-type
#        run: echo "::set-output name=package-type::$(python tests/package_tests/package_test_runner.py ${{ matrix.target }} package-filename-glob)"

      - name: Download package.
        uses: actions/download-artifact@v2
        with:
          name: "package-${{ steps.get-package-info.outputs.package-type }}"
          path: ~/package

      - name: Download package test (if presented).
        uses: actions/download-artifact@v2
        if: steps.get-package-info.outputs.package-type != 'k8s' && steps.get-package-info.outputs.package-type != 'docker-json'
        with:
          name: "package-test-${{ steps.get-package-info.outputs.package-type }}"
          path: ~/package_test

      - name: Start minikube for the test of the kubernetes build.
        if: ${{ steps.get-package-info.outputs.package-type == 'k8s' }}
        shell: bash
        run: |
          minikube start

      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
      - name: Make Kubernetes and docker package builder scripts executable.
        if: steps.get-package-info.outputs.package-type == 'k8s' || steps.get-package-info.outputs.package-type == 'docker-json'
        run: |
          chmod +x ~/package/*

      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
      - name: Make package test frozen binaries executable.
        id: precess-frozen-test-runner-path
        if: steps.get-package-info.outputs.package-type != 'k8s' && steps.get-package-info.outputs.package-type != 'docker-json'
        run: |
          chmod +x ~/package_test/package_test_runner*
          echo "::set-output name=frozen_test_runner_path::$(ls package_test_runner*)"


#      - name: Set up QEMU
#        id: qemu
#        uses: docker/setup-qemu-action@v1
#        with:
#          platforms: all

      - name: Test.
        shell: bash
        env:
          SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
        run: |
          echo "${{ steps.precess-frozen-test-runner-path.outputs.frozen_test_runner_path }}"
          python3 tests/package_tests/package_test_runner.py test ${{ matrix.target }} \
            --where ${{ matrix.where }} \
            --package-path ~/package/* \
            --frozen-test-runner-path "${{ steps.precess-frozen-test-runner-path.outputs.frozen_test_runner_path }}" \
            --scalyr-api-key "$SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN"


#  test:
#    needs: build
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        package_type: ["deb"]
#        os: ["ubuntu-20.04"]
#        docker-image: ["ubuntu:14.04", "ubuntu:16.04", "ubuntu:18.04", "ubuntu:20.04"]
#        python-version: [3.8]
#        include:
#          - package_type: "rpm"
#            os: ubuntu-20.04
#            docker-image: "centos:7"
#            python-version: "3.8"
#          - package_type: "rpm"
#            os: ubuntu-20.04
#            docker-image: "centos:8"
#            python-version: "3.8"
#          - package_type: "rpm"
#            os: ubuntu-20.04
#            docker-image: "amazonlinux:2"
#            python-version: "3.8"
#          - package_type: "tar"
#            os: ubuntu-20.04
#            docker-image: "ubuntu:14.04"
#            python-version: "3.8"
#          - package_type: "msi"
#            os: windows-2019
#            python-version: "3.8"
#          - package_type: "k8s"
#            os: ubuntu-20.04
#            python-version: "3.8"
#          - package_type: "docker-json"
#            os: ubuntu-20.04
#            python-version: "3.8"
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Download package.
#        uses: actions/download-artifact@v2
#        with:
#          name: "package-${{ matrix.package_type }}"
#          path: ~/package
#
#      - name: Download package test (if presented).
#        uses: actions/download-artifact@v2
#        if: matrix.package_type != 'k8s' && matrix.package_type != 'docker-json'
#        with:
#          name: "package-test-${{ matrix.package_type }}"
#          path: ~/package_test
#
#      - name: Start minikube for the test of the kubernetes build.
#        if: ${{ matrix.package_type == 'k8s' }}
#        shell: bash
#        run: |
#          minikube start
#
#      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
#      - name: Make Kubernetes and docker package builder scripts executable.
#        if: matrix.package_type == 'k8s' || matrix.package_type == 'docker-json'
#        run: |
#          chmod +x ~/package/*
#
#      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
#      - name: Make package test frozen binaries executable.
#        if: matrix.package_type != 'k8s' && matrix.package_type != 'docker-json'
#        run: |
#          chmod +x ~/package_test/package_test_runner*
#
##      - name: Set up QEMU
##        id: qemu
##        uses: docker/setup-qemu-action@v1
##        with:
##          platforms: all
#
#      - name: Test.
#        shell: bash
#        env:
#          SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
#        run: |
#          # Define the package_test_path option only if package test file is presented in artifacts.
#          package_test_path="$(ls ~/package_test/package_test_runner* || true)"
#          if [ -f "${package_test_path}" ]; then
#            package_test_path_option="--package-test-path ${package_test_path}"
#          else
#            package_test_path_option=""
#          fi
#
#
#          python3 tests/package_tests/package_test_runner.py \
#            --package-type ${{ matrix.package_type }} \
#            --docker-image "${{ matrix.docker-image }}" \
#            --package-path ~/package/* \
#            ${package_test_path_option} \
#            --scalyr-api-key "$SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN"
