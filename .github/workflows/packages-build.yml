name: Packages build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        package_type: ["deb", "rpm"]
        python-version: [3.8]
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            package_type: "tar"
            python-version: "3.8"
          - os: windows-2019
            package_type: "msi"
            python-version: "3.8"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Calculate the checksum of the build dependencies.
        shell: bash
        run: |
          python3 agent_build/build_package.py ${{ matrix.package_type }} prepare-environment --content-checksum-path checksum.txt

      - name: Restore cached dependensies of the build environent if exist.
        uses: actions/cache@v2
        env:
          cache-version: v1
        with:
          path: ~/dependencies_cache
          key: ${{ runner.os }}-build-dependencies-${{ env.cache-version }}-${{ hashFiles('checksum.txt') }}

      - name: Prepare build environment.
        shell: bash
        run: |
          python3 agent_build/build_package.py ${{ matrix.package_type }} prepare-environment --cache-dependencies-path ~/dependencies_cache

          # in some cases, the 'prepare-environment' command also generates file 'paths.txt'. This file contains paths
          # to binaries of all tools that are needed for the build. Use this file to add those paths to the PATH env.
          # variable to be able to use those tools.
          if [ -f ~/dependencies_cache/paths.txt ]; then
            cat ~/dependencies_cache/paths.txt
            cat ~/dependencies_cache/paths.txt >> $GITHUB_PATH
          fi

          # Remove checksum file
          rm checksum.txt



      - name: Build.
        shell: bash
        run: |
          python3 agent_build/build_package.py ${{ matrix.package_type }} build --output-dir agent-build-output
          ls -al agent-build-output/${{ matrix.package_type }}/*.${{ matrix.package_type }}*


      - name: Save the package.
        uses: actions/upload-artifact@v2
        with:
          name: "package-${{ matrix.package_type }}"
          path: |
            agent-build-output/${{ matrix.package_type }}/*.${{ matrix.package_type }}*



      - name: Save the frozen test script.
        uses: actions/upload-artifact@v2
        with:
          name: "package-test-executor-${{ matrix.package_type }}"
          path: |
            agent-build-output/${{ matrix.package_type }}/frozen_binary_test/package_test*




  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-20.04"]
        docker-image: ["ubuntu:14.04", "ubuntu:16.04", "ubuntu:18.04", "ubuntu:20.04"]
        package_type: ["deb"]
        python-version: [3.8]
        include:
          - os: ubuntu-20.04
            docker-image: "centos:7"
            package_type: "rpm"
            python-version: "3.8"
          - os: ubuntu-20.04
            docker-image: "centos:8"
            package_type: "rpm"
            python-version: "3.8"
          - os: ubuntu-20.04
            docker-image: "amazonlinux:2"
            package_type: "rpm"
            python-version: "3.8"
          - os: ubuntu-20.04
            package_type: "tar"
            docker-image: "ubuntu:14.04"
            python-version: "3.8"
          - os: windows-2019
            package_type: "msi"
            python-version: "3.8"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: "package-${{ matrix.package_type }}"
          path: ~/packages

      - uses: actions/download-artifact@v2
        with:
          name: "package-test-executor-${{ matrix.package_type }}"
          path: ~/test_executors

      - name: Test.
        shell: bash
        run: |
          ls -al ~/test_executors
          chmod +x ~/test_executors/package_test*
          ls ~/packages/*.${{ matrix.package_type }}*
          python3 tests/distribution_tests/package_test_runner.py \
            --docker-image "${{ matrix.docker-image }}" \
            --package-path ~/packages/*.${{ matrix.package_type }}* \
            --test-executor-path ~/test_executors/package_test* \
            --scalyr-api-key "0v7dW1EIPpglMcSjGywUdgY9xTNWQP/kas6qHEmiUG5w-"



