on:
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
      os:
        default: ubuntu-20.04
        required: false
        type: string
      python-version:
        required: false
        type: string
        default: 3.8.10

    #      package-build-spec:
#        required: true
#        type: string
#
#      test-specs:
#        required: false
#        type: string

    secrets:
      SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN:
        required: true

env:
  DOCKER_BUILDKIT: 1
jobs:
  get-deployments:
    runs-on: ${{ inputs.os }}
    outputs:
      package-build-deployer_name: ${{ steps.deployers-info.outputs.package-build-deployer_name }}
      #package-test-specs: ${{ steps.deployers-info.outputs.package-test-specs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - id: deployers-info
        run: |
          python3 .github/scripts/get-package-build-spec.py ${{ inputs.package_name }}
          echo "::set-output name=package-build-deployer_name::$(python3 .github/scripts/get-package-build-spec.py ${{ inputs.package_name }})"

  build:
    runs-on: ${{ inputs.os }}
    needs: get-deployments
    strategy:
      matrix: ${{fromJSON(needs.get-build-and-test-specs.outputs.package-build-spec)}}
#        package_type: ["deb_x86_64", "rpm_x86_64", "tar_x86_64", "deb_arm64", "rpm_arm64", "tar_arm64"]
#        os: [ubuntu-20.04]
#        python-version: ["3.8"]
#        include:
#          - package_type: ${{ inputs.package_name }}
#            os: ${{ inputs.os }}
#            python-version: "3.8"
#          - package_type: "k8s"
#            os: ubuntu-20.04
#            python-version: "3.8"
#          - package_type: "docker-json"
#            os: ubuntu-20.04
#            python-version: "3.8"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}


#      - name: Get information about deployers which are used to build '${{ matrix.package_type }}' package.
#        id: get-deployers-info
#        run: |
#          echo "::set-output name=deployer-names::$(python build_package.py get-build-spec ${{ matrix.package_type }} deployers)"
#          echo "::set-output name=deployer-base-image::$(python build_package.py get-build-spec ${{ matrix.package_type }} base-docker-image)"
#          echo "::set-output name=architecture::$(python build_package.py get-build-spec ${{ matrix.package_type }} architecture)"
#
#      - name: Prepare build environment by running appropriate deployer.
#        if: ${{ steps.get-deployers-info.outputs.deployer-names }}
#        id: prepare
#        uses: ./.github/actions/run-environment-deployer
#        with:
#          names: ${{ steps.get-deployers-info.outputs.deployer-names }}
#          base-docker-image: ${{ steps.get-deployers-info.outputs.deployer-base-image }}
#          architecture: ${{ steps.get-deployers-info.outputs.architecture }}

      - name: Set up QEMU
        if: ${{ !startsWith(inputs.package_name, 'msi') }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Prepare build environment by running appropriate deployer.
        if: ${{ needs.get-deployments.outputs.package-build-deployer_name }}
        id: prepare
        uses: ./.github/actions/run-environment-deployer
        with:
          name: ${{ needs.get-deployments.outputs.package-build-deployer_name }}

      - name: Build.
        id: build
        shell: bash
        run: |
          python build_package.py ${{ inputs.package_name }} --output-dir agent-build-output


      - name: Save the package.
        uses: actions/upload-artifact@v2
        with:
          name: package-${{ inputs.package_name }}
          path: |
            agent-build-output/${{ matrix.package-filename-glob }}*


  test:
    needs: [get-deployments,build]
    runs-on: ${{ inputs.os }}
    strategy:
      matrix: ${{fromJSON(needs.get-build-and-test-specs.outputs.package-test-specs) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Prepare build environment by running appropriate deployer.
        if: ${{ matrix.deployers }}
        uses: ./.github/actions/run-environment-deployer
        with:
          names: ${{ matrix.deployers }}
          base-docker-image: ${{ matrix.base-docker-image }}
          architecture: ${{ matrix.architecture }}

      - name: Prepare environment for the tests.
        uses: ./.github/actions/run-environment-deployer
        with:
          names: 'test_environment'

      - name: Download package.
        uses: actions/download-artifact@v2
        with:
          name: package-${{ inputs.package_name }}
          path: ~/package

      - name: Start minikube for the test of the kubernetes build.
        if: inputs.package_name == 'k8s'
        shell: bash
        run: |
          minikube start

      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
      - name: Make Kubernetes and docker package builder scripts executable.
        if: inputs.package_name == 'k8s' || inputs.package_name == 'docker-json'
        run: |
          chmod +x ~/package/*

      - name: Set up QEMU
        if: ${{ !startsWith(inputs.package_name, 'msi') }}
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Test.
        shell: bash
        env:
          SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
        run: |

          python3 tests/package_tests/package_test_runner.py \
            run \
            ${{ matrix.spec_name }} \
            --package-path ~/package/* \
            --scalyr-api-key "$SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN"
