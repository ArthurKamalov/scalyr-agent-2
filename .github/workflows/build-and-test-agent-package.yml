on:
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
      os:
        default: ubuntu-20.04
        required: false
        type: string
      python-version:
        required: false
        type: string
        default: 3.8.10

    secrets:
      SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN:
        required: true
      SCALYR_CLOUDTECH_TESTING_DEV_AWS_ACCESS_KEY:
        required: true
      SCALYR_CLOUDTECH_TESTING_DEV_AWS_ACCESS_SECRET:
        required: true
      AWS_DEV_US_EAST_1_KEYPAIR_NAME:
        required: true



env:
  DOCKER_BUILDKIT: 1
jobs:
  build:
    runs-on: ${{ inputs.os }}
    outputs:
      package-tests-matrix: ${{ steps.build.outputs.package-tests-matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Determine the name of the deployment.
        id: deployment-name
        shell: bash
        run: |
          echo "::set-output name=deployment-name::$(python3 .github/scripts/get-package-builder.py deployment-name ${{ inputs.package_name }})"

      - name: Set up QEMU
        if: ${{ !startsWith(inputs.package_name, 'msi') }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Perform the deployment of the build environment.
        id: hello
        uses: ./.github/actions/perform-deployment
        with:
          deployment-name: ${{ steps.deployment-name.outputs.deployment-name }}

      - name: Build.
        id: build
        shell: bash
        run: |
          python build_package.py ${{ inputs.package_name }} --output-dir agent-build-output

          echo "::set-output name=package-tests-matrix::$(python3 .github/scripts/get-package-builder.py package-test-specs-matrix ${{ inputs.package_name }})"
          echo "::set-output name=package-build-filename-glob::$(python3 .github/scripts/get-package-builder.py package-filename-glob ${{ inputs.package_name }})"

      - name: Build package test-runner.
        id: build-test-runner
        shell: bash
        run: |
          python tests/package_tests/frozen_test_runner/build_test_runner_frozen_binary.py  \
            --output-dir package-runner-build-output \
            --filename package-test-runner \
            --deployment-name ${{ steps.deployment-name.outputs.deployment-name }}

      - name: Save the package.
        uses: actions/upload-artifact@v2
        with:
          name: package-${{ inputs.package_name }}
          path: |
            agent-build-output/${{ steps.build.outputs.package-build-filename-glob }}*

      - name: Save package runner.
        uses: actions/upload-artifact@v2
        with:
          name: package-${{ inputs.package_name }}-runner
          path: |
            package-runner-build-output/package-test-runner*

      - run: whoami
        shell: bash




  test:
    name: ${{ matrix.test-name }}
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJSON(needs.build.outputs.package-tests-matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}


#      - name: Perform the deployment of the build environment.
#        id: hello
#        uses: ./.github/actions/perform-deployment
#        with:
#          deployment-name: ${{ matrix.deployment-name }}

      - name: Prepare environment for the tests.
        uses: ./.github/actions/perform-deployment
        with:
          deployment-name: 'test_environment_x86_64'

      - name: Download package.
        uses: actions/download-artifact@v2
        with:
          name: package-${{ inputs.package_name }}
          path: ~/package

      - name: Download package test runner.
        uses: actions/download-artifact@v2
        with:
          name: package-${{ inputs.package_name }}-runner
          path: ~/package-test-runner

      - name: Start minikube for the test of the kubernetes build.
        if: inputs.package_name == 'k8s'
        shell: bash
        run: |
          minikube start

      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
      - name: Make Kubernetes and docker package builder scripts executable.
        if: inputs.package_name == 'k8s' || inputs.package_name == 'docker-json'
        run: |
          chmod +x ~/package/${{ matrix.package-filename-glob }}

      - name: Set up QEMU
        if: ${{ !startsWith(inputs.package_name, 'msi') }}
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - run: whoami
        shell: bash

      - name: Test.
        shell: bash
        env:
          SCALYR_API_KEY: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
          AWS_ACCESS_KEY: ${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_AWS_ACCESS_SECRET }}
          AWS_PRIVATE_KEY: ${{ secrets.AWS_DEV_US_EAST_1_KEYPAIR_NAME }}
          AWS_KEYPAIR_NAME: scalyr_agent_github_actions_tests
          AWS_REGION: us-east-1
          AWS_SECURITY_GROUPS: allow-ssh-rdp
        run: |

          echo "$AWS_ACCESS_KEY"

          echo $AWS_PRIVATE_KEY > ~/aws-key.pem

          # set test runner executable.
          chmod +x ~/package-test-runner/package-test-runner*

          AWS_PRIVATE_KEY_PATH=~/aws-key.pem python3 tests/package_tests/run_package_test.py \
            ${{ matrix.test-name }} \
            run \
            --package-path ~/package/${{ matrix.package-filename-glob }} \
            --frozen-package-test-runner-path ~/package-test-runner/package-test-runner* \
