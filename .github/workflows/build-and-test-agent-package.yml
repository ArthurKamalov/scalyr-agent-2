on:
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
      os:
        default: ubuntu-20.04
        required: false
        type: string
      python-version:
        required: false
        type: string
        default: 3.8.10

    #      package-build-spec:
#        required: true
#        type: string
#
#      test-specs:
#        required: false
#        type: string

    secrets:
      SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN:
        required: true

env:
  DOCKER_BUILDKIT: 1
jobs:
#  get-deployments:
#    runs-on: ${{ inputs.os }}
#    outputs:
#      package-build-deployer_name: ${{ steps.deployers-info.outputs.package-build-deployer_name }}
#      #package-test-specs: ${{ steps.deployers-info.outputs.package-test-specs }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Install python.
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ inputs.python-version }}
#
#      - id: deployers-info
#        run: |
#          python3 .github/scripts/get-package-build-spec.py ${{ inputs.package_name }}
#          echo "::set-output name=package-build-deployer_name::$(python3 .github/scripts/get-package-build-spec.py ${{ inputs.package_name }})"

  build:
    runs-on: ${{ inputs.os }}
    outputs:
      package-tests-matrix: ${{ steps.build.outputs.package-tests-matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - id: deployers-info
        shell: bash
        run: |
          #echo "::set-output name=package-build-deployer_name::$(python3 .github/scripts/get-package-build-spec.py deployment-name ${{ inputs.package_name }})"
          deployer_name=$(python3 .github/scripts/get-package-build-spec.py deployment-name ${{ inputs.package_name }})
          echo "::set-output name=package-build-deployer_names::$(python3 .github/scripts/get-deployment.py deployments-as-string-array $deployer_name)"
          echo "$deployer_name"

#      - name: Get information about deployers which are used to build '${{ matrix.package_type }}' package.
#        id: get-deployers-info
#        run: |
#          echo "::set-output name=deployer-names::$(python build_package.py get-build-spec ${{ matrix.package_type }} deployers)"
#          echo "::set-output name=deployer-base-image::$(python build_package.py get-build-spec ${{ matrix.package_type }} base-docker-image)"
#          echo "::set-output name=architecture::$(python build_package.py get-build-spec ${{ matrix.package_type }} architecture)"
#
#      - name: Prepare build environment by running appropriate deployer.
#        if: ${{ steps.get-deployers-info.outputs.deployer-names }}
#        id: prepare
#        uses: ./.github/actions/run-environment-deployer
#        with:
#          names: ${{ steps.get-deployers-info.outputs.deployer-names }}
#          base-docker-image: ${{ steps.get-deployers-info.outputs.deployer-base-image }}
#          architecture: ${{ steps.get-deployers-info.outputs.architecture }}
      - name: Hello world action step
        id: hello
        uses: ./.github/actions/test
        with:
          who-to-greet: 'Mona the Octocat'

      - name: Set up QEMU
        if: ${{ !startsWith(inputs.package_name, 'msi') }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all


#      - name: Prepare build environment by running appropriate deployer.
#        if: ${{ steps.deployers-info.outputs.package-build-deployer_names }}
#        id: prepare
#        uses: ./.github/actions/run-environment-deployer
#        with:
#          names: ${{ steps.deployers-info.outputs.package-build-deployer_names }}

      - name: Build.
        id: build
        shell: bash
        run: |
          python build_package.py ${{ inputs.package_name }} --output-dir agent-build-output

          echo "::set-output name=package-tests-matrix::$(python3 .github/scripts/get-package-build-spec.py package-test-specs-matrix ${{ inputs.package_name }})"
          echo "::set-output name=package-build-filename-glob::$(python3 .github/scripts/get-package-build-spec.py package-filename-glob ${{ inputs.package_name }})"



      - name: Save the package.
        uses: actions/upload-artifact@v2
        with:
          name: package-${{ inputs.package_name }}
          path: |
            agent-build-output/${{ steps.build.outputs.package-build-filename-glob }}*


#  test:
#    needs: [build]
#    runs-on: ${{ inputs.os }}
#    strategy:
#      matrix: ${{fromJSON(needs.build.outputs.package-tests-matrix) }}
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Install python.
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ inputs.python-version }}
#
#      - name: Prepare build environment by running appropriate deployer.
#        if: ${{ matrix.deployers }}
#        uses: ./.github/actions/run-environment-deployer
#        with:
#          name: ${{ matrix.deployers }}
#          base-docker-image: ${{ matrix.base-docker-image }}
#          architecture: ${{ matrix.architecture }}
#
#      - name: Prepare environment for the tests.
#        uses: ./.github/actions/run-environment-deployer
#        with:
#          names: 'test_environment'
#
#      - name: Download package.
#        uses: actions/download-artifact@v2
#        with:
#          nam: package-${{ inputs.package_name }}
#          path: ~/package
#
#      - name: Start minikube for the test of the kubernetes build.
#        if: inputs.package_name == 'k8s'
#        shell: bash
#        run: |
#          minikube start
#
#      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
#      - name: Make Kubernetes and docker package builder scripts executable.
#        if: inputs.package_name == 'k8s' || inputs.package_name == 'docker-json'
#        run: |
#          chmod +x ~/package/*
#
#      - name: Set up QEMU
#        if: ${{ !startsWith(inputs.package_name, 'msi') }}
#        id: qemu
#        uses: docker/setup-qemu-action@v1
#        with:
#          platforms: all
#
#      - name: Test.
#        shell: bash
#        env:
#          SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
#        run: |
#
#          python3 tests/package_tests/package_test_runner.py \
#            run \
#            ${{ matrix.spec_name }} \
#            --package-path ~/package/* \
#            --scalyr-api-key "$SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN"
