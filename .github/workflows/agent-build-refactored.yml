name: Agent Build Refactored

on:
  push:
  pull_request:
    branches:
      - master
  schedule:
    - cron: '0 4 * * *'

permissions:
  contents: read

# This job skips another workflows with identical content and also generates strategy matrices for all further jobs.
# Since we do a "limited" run on non-master custom branch, it generates matrices with different size according to
# that information.
jobs:
  pre-job:
    runs-on: ubuntu-20.04
    outputs:
      pre_build_steps_matrix_json: ${{ steps.get-job-matrices.outputs.pre_build_steps_matrix_json }}
      agent_image_build_matrix_json: ${{ steps.get-job-matrices.outputs.agent_image_build_matrix_json }}

    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@9d116fa7e55f295019cfab7e3ab72b478bcf7fdd # v4.0.0
        with:
          cancel_others: 'true'
          concurrent_skipping: 'same_content'
          do_not_skip: '["workflow_dispatch", "schedule", "pull_request"]'
          github_token: ${{ github.token }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8.13"

      - name: "Get matrices for all further jobs."
        id: get-job-matrices
        run: |
          python3 agent_build_refactored/scripts/get_github_actions_job_matrices.py \
            --event_name "${{ github.event_name }}" \
            --base_ref "${{ github.base_ref }}" \
            --ref_type "${{ github.ref_type }}" \
            --ref_name "${{ github.ref_name }}" > job_matrices.json
          
          echo "::set-output name=pre_build_steps_matrix_json::$(cat job_matrices.json | jq -c '.pre_build_steps_matrix')"
          echo "::set-output name=agent_image_build_matrix_json::$(cat job_matrices.json | jq -c '.agent_image_build_matrix')"

      - name: "Print job matrices."
        run: |

          echo "Image pre-build steps job matrix: "
          echo '${{ steps.get-job-matrices.outputs.agent_image_build_matrix_json }}' | jq --color-output
          
          echo "Image build job matrix: "
          echo '${{ steps.get-job-matrices.outputs.pre_build_steps_matrix_json }}' | jq --color-output


  # This job pre-executes and caches Runner steps that has to be executed in a separate job.
  # For example, we build platform-specific base docker images in a separate jobs to reduce overall build time, because
  # some of base images are built with using QEMU.
  pre-build-cached-step:
    name: ${{ matrix.name }}
    if: needs.pre-job.outputs.should_skip != 'true'
    needs:
      - pre-job

    runs-on: ${{ matrix.os }}
    strategy:
      # This job receives its matrix from the previous job. The matrix itself is created by the agent_build_refactored/scripts/get_github_actions_job_matrices.py  script.
      # The matrix, for now, consists only from the 'include' part with following fields:
      #   "name": Name of the build job. (Not used in actiual build process, but just gives meaningful name to the job).
      #   "step-runner-fqdn": Fully qualified name of the builder class that has to run the cached step.
      #   "python-version": Version of python to setup on this runner. (NOTE: version of python used in images may differ, and it specified in the source code.)
      #   "os": Runner OS.
      matrix: ${{ fromJSON(needs.pre-job.outputs.pre_build_steps_matrix_json) }}

    env:
      DOCKER_BUILDKIT: 1
      # Set this variable to tell the agent build code that it runs in CI/CD and it needs to use caching.
      AGENT_BUILD_IN_CICD: "1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0
        with:
          driver-opts: network=host

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Run cached step.
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: ${{ matrix.step-runner-fqdn }}


  build-images:
    name: Build image '${{ matrix.builder-name }}'.
    needs:
      - pre-job
      - pre-build-cached-step
    runs-on: ${{ matrix.os }}

    strategy:
      # This job receives its matrix from the previous job. The matrix itself is created by the agent_build_refactored/scripts/get_github_actions_job_matrices.py script.
      # The matrix, for now, consists only from the 'include' part with following fields:
      #   "builder-name": name of the builder that builds the target images.
      #   "builder-fqdn": Fully qualified name of the builder to find its cached steps..
      #   "python-version": Version of python to setup on this runner. (NOTE: version of python used in images may differ, and it specified in the source code.)
      #   "os": Runner OS.
      matrix: ${{ fromJSON(needs.pre-job.outputs.agent_image_build_matrix_json) }}

    env:
      DOCKER_BUILDKIT: 1
      # Set this variable to tell the agent build code that it runs in CI/CD and it needs to use caching.
      AGENT_BUILD_IN_CICD: "1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0
        with:
          driver-opts: network=host

      - name: Prepare everything that is needed by image builder '${{ matrix.builder-name }}'
        uses: ./.github/actions/execute-runner
        with:
          runner-fqdn: ${{ matrix.builder-fqdn }}

      - name: Build image with builder '${{ matrix.builder-name }}'
        run: |
          python3 build_package_new_refactored.py ${{ matrix.builder-name }} \
            build --output-registry-dir /tmp/result

      - name: Save registry data root with result images as artifact.
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.builder-name }}-registry
          path: /tmp/result
          retention-days: 1