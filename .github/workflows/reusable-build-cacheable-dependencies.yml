name: Build all cacheable dependencies

on:
  push:
    branches:
      - master
      - build-python-dockerfile
  pull_request:
    branches:
      - master


env:
  AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
  AWS_PRIVATE_KEY_NAME: CT_SCALYR_AGENT_GHA
  AWS_DEV_EC2_PRIVATE_KEY: ${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}
  AWS_REGION: us-east-1
  AWS_SECURITY_GROUP: github-actions-remote-access
  AWS_SECURITY_GROUPS_PREFIX_LIST_ID: pl-04a16228a97704d23
  AWS_OBJECTS_NAME_PREFIX: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}" >> "${GITHUB_OUTPUT}"



jobs:
  prepare_before_build:
    name: Prepare before dependencies build
    runs-on: ubuntu-22.04
    outputs:
      cache_miss: ${{ steps.get_dependency_matrices.outputs.cache_miss }}
      runs_on: ${{ steps.get_dependency_matrices.outputs.runs_on }}

      DEPENDENCY_GROUP_MATRIX_0: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_0 }}
      DEPENDENCY_GROUP_MATRIX_1: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_1 }}
      DEPENDENCY_GROUP_MATRIX_2: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_2 }}
      DEPENDENCY_GROUP_MATRIX_3: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_3 }}
      DEPENDENCY_GROUP_MATRIX_4: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_4 }}
      DEPENDENCY_GROUP_MATRIX_5: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_5 }}
      DEPENDENCY_GROUP_MATRIX_6: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_6 }}
      DEPENDENCY_GROUP_MATRIX_7: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_7 }}
      DEPENDENCY_GROUP_MATRIX_8: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_8 }}
      DEPENDENCY_GROUP_MATRIX_9: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_9 }}
      DEPENDENCY_GROUP_MATRIX_10: ${{ steps.get_dependency_matrices.outputs.DEPENDENCY_GROUP_MATRIX_10 }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: install python and requirements
        uses: ./.github/actions/install_python_and_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Expose GitHub Runtime To Be Able to Use GHA Cache By Docker.
        uses: crazy-max/ghaction-github-runtime@715c25b40ccc0df9b62bfa8be3ccc57d09dbc4b1

      - name: Get dependency matrices
        id: get_dependency_matrices
        env:
          BUILDER_MODULES: tests.end_to_end_tests
          USE_GHA_CACHE: "1"
          CACHE_VERSION: ${{ needs.pre_job.outputs.cache_version }}
        run: |
          
          OUTPUT="$(python3 agent_build_refactored/scripts/cicd/verify_all_dependencies_caches.py)"

          if [ "${OUTPUT}" == "cache_miss" ]; then
            echo "cache_miss=true" >> "$GITHUB_OUTPUT"
            echo "Expected output of the build command has to be 'cache_hit' but it is '${OUTPUT}'"
            exit 0
          fi
          
          echo "::notice::Need to build and cache some dependencies first (May take longer than fully cached build)"
          echo "runs_on=ubuntu-22.04" >> "${GITHUB_OUTPUT}"
          
          MATRICES=$(python3 agent_build_refactored/scripts/cicd/create_cacheable_steps_matrix.py)
          echo "Matrices:"
          echo "${MATRICES}"
          echo "${MATRICES}" >> "${GITHUB_OUTPUT}"

#  group_0:
#    name: (0)${{ matrix.id }}
#    needs: [prepare_before_build]
#    runs-on: ${{ needs.prepare_before_build.outputs.runs_on }}
#    if: needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_0 != '' && needs.prepare_before_build.outputs.cache_miss == 'true'
#    strategy:
#      matrix: ${{ fromJSON( needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_0) }}
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: ./.github/actions/build_cacheable_dependency
#        with:
#          dependency_id: ${{ matrix.id }}
#          python_version: ${{ inputs.python_version }}
#          cache_version: ${{ inputs.cache_version }}
#
#  group_1:
#    name: (1)${{ matrix.id }}
#    needs: [ prepare_before_build, group_0]
#    runs-on: ${{ needs.prepare_before_build.outputs.runs_on }}
#    if: needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_1 != '' && needs.prepare_before_build.outputs.cache_miss == 'true'
#    strategy:
#      matrix: ${{ fromJSON( needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_1) }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Build dependency
#        uses: ./.github/actions/build_cacheable_dependency
#        with:
#          dependency_id: ${{ matrix.id }}
#          python_version: ${{ inputs.python_version }}
#          cache_version: ${{ inputs.cache_version }}
#
#  group_2:
#    name: (2)${{ matrix.id }}
#    needs: [ prepare_before_build, group_1 ]
#    runs-on: ${{ needs.prepare_before_build.outputs.runs_on }}
#    if: needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_2 != '' && needs.prepare_before_build.outputs.cache_miss == 'true'
#    strategy:
#      matrix: ${{ fromJSON( needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_2) }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Build dependency
#        uses: ./.github/actions/build_cacheable_dependency
#        with:
#          dependency_id: ${{ matrix.id }}
#          python_version: ${{ inputs.python_version }}
#          cache_version: ${{ inputs.cache_version }}
#
#  group_3:
#    name: (3)${{ matrix.id }}
#    needs: [ prepare_before_build, group_2 ]
#    runs-on: ${{ needs.prepare_before_build.outputs.runs_on }}
#    if: needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_3 != '' && needs.prepare_before_build.outputs.cache_miss == 'true'
#    strategy:
#      matrix: ${{ fromJSON( needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_3) }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Build dependency
#        uses: ./.github/actions/build_cacheable_dependency
#        with:
#          dependency_id: ${{ matrix.id }}
#          python_version: ${{ inputs.python_version }}
#          cache_version: ${{ inputs.cache_version }}
#
#  group_4:
#    name: (4)${{ matrix.id }}
#    needs: [ prepare_before_build, group_3 ]
#    runs-on: ${{ needs.prepare_before_build.outputs.runs_on }}
#    if: needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_4 != '' && needs.prepare_before_build.outputs.cache_miss == 'true'
#    strategy:
#      matrix: ${{ fromJSON( needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_4) }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Build dependency
#        uses: ./.github/actions/build_cacheable_dependency
#        with:
#          dependency_id: ${{ matrix.id }}
#          python_version: ${{ inputs.python_version }}
#          cache_version: ${{ inputs.cache_version }}
#
#  group_5:
#    name: (5)${{ matrix.id }}
#    needs: [ prepare_before_build, group_4 ]
#    runs-on: ${{ needs.prepare_before_build.outputs.runs_on }}
#    if: needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_5 != '' && needs.prepare_before_build.outputs.cache_miss == 'true'
#    strategy:
#      matrix: ${{ fromJSON( needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_5) }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Build dependency
#        uses: ./.github/actions/build_cacheable_dependency
#        with:
#          dependency_id: ${{ matrix.id }}
#          python_version: ${{ inputs.python_version }}
#          cache_version: ${{ inputs.cache_version }}
#
#  group_6:
#    name: (6)${{ matrix.id }}
#    needs: [ prepare_before_build, group_5 ]
#    runs-on: ${{ needs.prepare_before_build.outputs.runs_on }}
#    if: needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_6 != '' && needs.prepare_before_build.outputs.cache_miss == 'true'
#    strategy:
#      matrix: ${{ fromJSON( needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_6) }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Build dependency
#        uses: ./.github/actions/build_cacheable_dependency
#        with:
#          dependency_id: ${{ matrix.id }}
#          python_version: ${{ inputs.python_version }}
#          cache_version: ${{ inputs.cache_version }}
#
#  group_7:
#    name: (7)${{ matrix.id }}
#    needs: [ prepare_before_build, group_6 ]
#    runs-on: ${{ needs.prepare_before_build.outputs.runs_on }}
#    if: needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_7 != '' && needs.prepare_before_build.outputs.cache_miss == 'true'
#    strategy:
#      matrix: ${{ fromJSON( needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_7) }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Build dependency
#        uses: ./.github/actions/build_cacheable_dependency
#        with:
#          dependency_id: ${{ matrix.id }}
#          python_version: ${{ inputs.python_version }}
#          cache_version: ${{ inputs.cache_version }}
#
#  group_8:
#    name: (8)${{ matrix.id }}
#    needs: [ prepare_before_build, group_7 ]
#    runs-on: ${{ needs.prepare_before_build.outputs.runs_on }}
#    if: needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_8 != '' && needs.prepare_before_build.outputs.cache_miss == 'true'
#    strategy:
#      matrix: ${{ fromJSON( needs.prepare_before_build.outputs.DEPENDENCY_GROUP_MATRIX_8) }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Build dependency
#        uses: ./.github/actions/build_cacheable_dependency
#        with:
#          dependency_id: ${{ matrix.id }}
#          python_version: ${{ inputs.python_version }}
#          cache_version: ${{ inputs.cache_version }}
#
#
