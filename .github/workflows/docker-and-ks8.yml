name: Build agent packages.

on: [push]

env:
  DOCKER_BUILDKIT: 1


jobs:
  # TODO move here tests from the CicleCi.
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image-type: [docker-json, docker-syslog, docker-api, k8s]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.10

      - name: Perform the deployment of the test environment.
        uses: ./.github/actions/perform-deployment
        with:
          deployment-name: "test_environment"

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Start minikube for the test of the kubernetes build.
        if: matrix.image-type == 'k8s'
        shell: bash
        run: |
          minikube start

      - name: Run image test.
        env:
            SCALYR_API_KEY: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
        run: |
          python3 tests/package_tests/run_package_test.py run-package-test ${{ matrix.image-type}}_test

      - name: Run docker smoke tests
        if: startsWith( matrix.image-type, 'docker-')
        env:
          SCALYR_API_KEY: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
          READ_API_KEY: ${{ secrets.SCALYR_CLOUDTECH_TESTING_DEV_SCALYR_READ_API_KEY }}
          CIRCLE_BUILD_NUM: ${{ github.run_number }}_${{ github.run_attempt }}

        run: |
          if [[ "${{ matrix.image-type}}" == "k8s" ]]; then
            source ./.circleci/smoketest_k8s.sh scalyr/scalyr-agent-ci-unittest:4 150 no_delete_existing_k8s_objs
          else
            source ./.circleci/smoketest_docker.sh scalyr/scalyr-agent-ci-unittest:4 ${{ matrix.image-type}} 150
          fi


  publish:
    needs: [test]
    name: Publish image.
    if: ${{ github.ref == 'refs/heads/master' || github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image-type: [docker-json, docker-syslog k8s]


    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Push image from master branch.
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |

          python3 build_package_new.py ${{ matrix.image-type }} \
            --push \
            --registry \
            localhost:5000 \
            --tag ${{ github.sha }}

      - name: Push image using master branch commit hash.
        if: ${{ github.ref_type == 'tag' }}
        run: |

          if [[ "${{ github.ref_name }}" == "v$(cat VERSION)" ]]; then
            # if the this is a "release" tag with format "v*.*.*", then use version as tag
            # also add the 'latest' tag.
            tags="--tag $(cat VERSION) --tag latest"
          else
            # Just use GitHub tag as image tag.
            tags="--tag ${{ github.ref_name }}"
          fi

          python3 build_package_new.py ${{ matrix.image-type }} \
            --push \
            --registry \
            localhost:5000 \
            $tags



