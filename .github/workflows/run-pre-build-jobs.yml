name: Run pre-built jobs.
on:
  workflow_call:
    inputs:
      python_version:
        type: string
      aws_private_key_name:
        type: string
      aws_region:
        type: string
      aws_security_group:
        type: string
      aws_prefix_list_id:
        type: string
      aws_objects_name_prefix:
        type: string
      cache_version_suffix:
        type: string
    secrets:
      CT_AWS_DEV_EC2_PRIVATE_KEY:
        required: true
      CT_AWS_DEV_EC2_ACCESS_KEY:
        required: true
      CT_AWS_DEV_EC2_SECRET_KEY:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ:
        required: true
permissions:
  contents: read
jobs:
  pre_job:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Get missing step caches matrices
      id: get_missing_caches_matrices
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: '["build_agent_libs_venv_arm64-centos-7-linux-arm64-c93dc1c030c992586820adebd1adf8a97559665f034f3b60831c703b7e774cf6",
          "build_agent_libs_venv_x86_64-centos-6-linux-amd64-7e2bd84015645dd0b5e63448fdf726269ca086537506f7df8d745ed400ee6ab2",
          "build_dev_requirements_arm64-centos-7-linux-arm64-d9c771ce73feed417d6b2542ff40f599440447eefc8ffc423caa70293df273ff",
          "build_dev_requirements_x86_64-centos-6-linux-amd64-a6e475e522215510a2abd72184d28b3bace4f6100e6b56015b9f8775e152e692",
          "build_openssl_1_1_1_arm64-centos-7-linux-arm64-9f34e231228c7013db4bf4641351975d003258c8e66a92597ecdfd90efdb0830",
          "build_openssl_1_1_1_x86_64-centos-6-linux-amd64-4d0692ebd37ccc95dbe234297503aaba364b61c5b832d325b1c1704cce8e615e",
          "build_openssl_3_arm64-centos-7-linux-arm64-86ef901d63d99af51ce98e5323f21170b110534209cab706f9cd4da5034649f0",
          "build_openssl_3_x86_64-centos-6-linux-amd64-0fd7265e4fdee28f04be9c59490a8cb71638d4cd0507b207bb70fb5219cf7537",
          "build_portable_pytest_runner_arm64-centos-7-linux-arm64-04e712920698b304591222af3fe9d94677cd3d3fa3e54598420162234855c1d3",
          "build_portable_pytest_runner_x86_64-centos-6-linux-amd64-c63e059c28d600f9a6b3043e30e399b3350fa733662eecccae19a19d437b41e0",
          "build_python_1_1_1_arm64-centos-7-linux-arm64-cbdb8fa7232cc3e7bce9d1d7b8282ec493bad8a8c9ba1e923793d5c280ddf830",
          "build_python_1_1_1_x86_64-centos-6-linux-amd64-4fa13f420e8087d30bf0613d1840de8c3ea513afb1749500cb05253b0ba5707d",
          "build_python_3_arm64-centos-7-linux-arm64-9ce140af9c3a245bfea255269c0b98e8031efb53ffb347983b444388bf3cb59f",
          "build_python_3_x86_64-centos-6-linux-amd64-1c8518db78632cb94bb2b8d7953b11acf38a6dd486f81fbf25425bc7b9d3bcaa",
          "build_python_dependencies_arm64-centos-7-linux-arm64-2757e4156f0d365d98f6ddfd389326a8d8821e0706e16e7ba62ed6783ca40a9d",
          "build_python_dependencies_x86_64-centos-6-linux-amd64-aa762687c4600fe5a50e862599634a857e8f9da588f0001889e2d77c72e9e787",
          "download_build_dependencies-ubuntu-22-04-linux-amd64-93337f4d9c99983e5d84c4f6ca85ce821e5bc797932132db824c27e621116c12",
          "install_build_environment_arm64-centos-7-linux-arm64-daaf9b4187264790d61276ae30dfe02378c11822bf5b5e65384148eccd105326",
          "install_build_environment_x86_64-centos-6-linux-amd64-1a88904d6fa78616526b85809b40aaaa819584f867fa210d104d8464d2455d9c",
          "prepare_python_environment_arm64-centos-7-linux-arm64-e98039df76f77bf81bab0b7273bc728ac463e0b87480f48a86dc02c0915d7af7",
          "prepare_python_environment_x86_64-centos-6-linux-amd64-004aba4856b0350707e5db6def26d194a0dde651fc0e40d6f6da89e6b2479122",
          "prepare_toolset_x86_64-ubuntu-22-04-linux-amd64-790b6ecc6224321b09188617a5fc1526b4b917371d201da90a17cd4955b086f8"]'
        cache_version_suffix: v12
        cache_root: agent_build_output/step_cache
        lookup_only: true
    - name: Print
      id: print
      shell: bash
      run: |
        echo '${{ steps.get_missing_caches_matrices.outputs.missing_cache_keys_json }}' > /tmp/missing_cache_keys.json
        echo "MISSS"
        cat /tmp/missing_cache_keys.json
        echo "MISSSEND"
        python3  agent_build_refactored/cicd/get_prebuilt_steps_runners.py get-missing-caches-matrices --input-missing-cache-keys-file /tmp/missing_cache_keys.json > /tmp/missing_cache_matrices.json
        i=0
        jq -c '.[]' /tmp/missing_cache_matrices.json | while read -r matrix; do 
          echo "matrix${i}=$(echo "$matrix" | jq -c '.')" >> $GITHUB_OUTPUT
          echo "matrix_length${i}=$(echo "$matrix" | jq -c '.["include"] | length')" >> $GITHUB_OUTPUT
          ((i=i+1))
        done
        cat $GITHUB_OUTPUT
    outputs:
      matrix0: ${{ steps.print.outputs.matrix0 }}
      matrix_length0: ${{ steps.print.outputs.matrix_length0 }}
      matrix1: ${{ steps.print.outputs.matrix1 }}
      matrix_length1: ${{ steps.print.outputs.matrix_length1 }}
      matrix2: ${{ steps.print.outputs.matrix2 }}
      matrix_length2: ${{ steps.print.outputs.matrix_length2 }}
      matrix3: ${{ steps.print.outputs.matrix3 }}
      matrix_length3: ${{ steps.print.outputs.matrix_length3 }}
      matrix4: ${{ steps.print.outputs.matrix4 }}
      matrix_length4: ${{ steps.print.outputs.matrix_length4 }}
      matrix5: ${{ steps.print.outputs.matrix5 }}
      matrix_length5: ${{ steps.print.outputs.matrix_length5 }}
  run_pre_built_job0:
    name: Level 0 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    if: ${{ needs.pre_job.outputs.matrix_length0 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix0) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job1:
    name: Level 1 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job0
    if: ${{ always() && (needs.run_pre_built_job0.result == 'success' || needs.run_pre_built_job0.result
      == 'skipped') && needs.pre_job.outputs.matrix_length1 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix1) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job2:
    name: Level 2 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job1
    if: ${{ always() && (needs.run_pre_built_job1.result == 'success' || needs.run_pre_built_job1.result
      == 'skipped') && needs.pre_job.outputs.matrix_length2 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix2) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job3:
    name: Level 3 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job2
    if: ${{ always() && (needs.run_pre_built_job2.result == 'success' || needs.run_pre_built_job2.result
      == 'skipped') && needs.pre_job.outputs.matrix_length3 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix3) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job4:
    name: Level 4 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job3
    if: ${{ always() && (needs.run_pre_built_job3.result == 'success' || needs.run_pre_built_job3.result
      == 'skipped') && needs.pre_job.outputs.matrix_length4 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix4) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job5:
    name: Level 5 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job4
    if: ${{ always() && (needs.run_pre_built_job4.result == 'success' || needs.run_pre_built_job4.result
      == 'skipped') && needs.pre_job.outputs.matrix_length5 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix5) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
