name: Run pre-built jobs.
on:
  workflow_call:
    inputs:
      python_version:
        type: string
      aws_private_key_name:
        type: string
      aws_region:
        type: string
      aws_security_group:
        type: string
      aws_prefix_list_id:
        type: string
      aws_objects_name_prefix:
        type: string
      cache_version_suffix:
        type: string
    secrets:
      CT_AWS_DEV_EC2_PRIVATE_KEY:
        required: true
      CT_AWS_DEV_EC2_ACCESS_KEY:
        required: true
      CT_AWS_DEV_EC2_SECRET_KEY:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ:
        required: true
permissions:
  contents: read
jobs:
  pre_job:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Get missing step caches matrices
      id: get_missing_caches_matrices
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: '["build_agent_libs_venv_arm64-centos-7-linux-arm64-7fb6ced491f8cc6db5b6a3729cb1ddb835c0c6f829530d3f48e065ca5d1033bf",
          "build_agent_libs_venv_x86_64-centos-6-linux-amd64-9f4b9b29236deb98b222b2ab6740c17186a6f3a59cc439657a8aae49ec31a3ad",
          "build_dev_requirements_arm64-centos-7-linux-arm64-d177aa6fa0bd2843ec112a675545eb87b454eb7f1d99b175d2974b921a932213",
          "build_dev_requirements_x86_64-centos-6-linux-amd64-43a5bd98e0b5b1768231009a16e64863c4deeacb54a12c9be7b4b95507b91899",
          "build_openssl_1_1_1_arm64-centos-7-linux-arm64-48c92a30fe5589323fb1d56ea627c8023e07f0bf9dabeeee411e3fa4cd704134",
          "build_openssl_1_1_1_x86_64-centos-6-linux-amd64-1b2e38b3ba25ab12eb3224e95635aec3ea4b583beb68f4074410dfb039ed2719",
          "build_openssl_3_arm64-centos-7-linux-arm64-c1025ed386213b3ee22242b15cc1b34d11679f7ff3653258a1a9d6f0da68d7db",
          "build_openssl_3_x86_64-centos-6-linux-amd64-811ddbe39374d1c8ebdead4263c802b043ab4e22aecaa7c001934d6da8144a4f",
          "build_portable_pytest_runner_arm64-centos-7-linux-arm64-0bea9c7326612b4a9fae4c8ffb321b81bb6419fb14e8fa8051c0f9dad89ce783",
          "build_portable_pytest_runner_x86_64-centos-6-linux-amd64-e58de8a64e02fc0cce773a95561d405903fd34d196f681e057dcadd75fc99153",
          "build_python_1_1_1_arm64-centos-7-linux-arm64-5fd37b5bef7f49ec0eae961ce7c80a65165c56bd01a206708c37de9a8f297c9b",
          "build_python_1_1_1_x86_64-centos-6-linux-amd64-39b4613d6f22e10a4ce5bfe5c19e4f4135c8f9b9be8a1144c15b4e56e9111f0d",
          "build_python_3_arm64-centos-7-linux-arm64-8dd96d28266e7abfc8cb9a5848d1c5bc29f598dd070e75514c86475e03ed93aa",
          "build_python_3_x86_64-centos-6-linux-amd64-64845615694c294080e6a712af1edc7c0bd92841cf8887638a81662ca90daa54",
          "build_python_dependencies_arm64-centos-7-linux-arm64-6ab028d48ff56e24a561ed5b522d2d6da83a035f12236c2ab1c0d341ddb6aaa7",
          "build_python_dependencies_x86_64-centos-6-linux-amd64-ea3d979d95d8181f955965dd50178af619eaed9a9097efa9d3de1443f8cef567",
          "download_build_dependencies-ubuntu-22-04-linux-amd64-c145630f8525f18e5c32eaeb1a815fb1cd82449ffbeaf7ad7007bd39a0ee2f80",
          "install_build_environment_arm64-centos-7-linux-arm64-98628582d5bbde89ca1ebcecabae204796ae86d80fa18b7005a0836066abeb18",
          "install_build_environment_x86_64-centos-6-linux-amd64-c770e8725d62b7838cb6f3bd6a3c7a202ffc9176e8aa3a443553c2d304dd1627",
          "prepare_python_environment_arm64-centos-7-linux-arm64-d7f2f775db222387a64fc9e8984bf48b594e8c7872d07afb4494e0d23ab4a44c",
          "prepare_python_environment_x86_64-centos-6-linux-amd64-35a8111e5a534198db547b36dc1367124605bfbfcba68f3c503e1459a270e920",
          "prepare_toolset_x86_64-ubuntu-22-04-linux-amd64-711077b6458732363915059f8239b487b74db26b3723e1d26d74e9401d6f365e"]'
        cache_version_suffix: v12
        cache_root: agent_build_output/step_cache
        lookup_only: true
    - name: Print
      id: print
      shell: bash
      run: |
        echo '${{ steps.get_missing_caches_matrices.outputs.missing_cache_keys_json }}' > /tmp/missing_cache_keys.json
        echo "MISSS"
        cat /tmp/missing_cache_keys.json
        echo "MISSSEND"
        python3  agent_build_refactored/cicd/get_prebuilt_steps_runners.py get-missing-caches-matrices --input-missing-cache-keys-file /tmp/missing_cache_keys.json > /tmp/missing_cache_matrices.json
        i=0
        jq -c '.[]' /tmp/missing_cache_matrices.json | while read -r matrix; do 
          echo "matrix${i}=$(echo "$matrix" | jq -c '.')" >> $GITHUB_OUTPUT
          echo "matrix_length${i}=$(echo "$matrix" | jq -c '.["include"] | length')" >> $GITHUB_OUTPUT
          ((i=i+1))
        done
        cat $GITHUB_OUTPUT
    outputs:
      matrix0: ${{ steps.print.outputs.matrix0 }}
      matrix_length0: ${{ steps.print.outputs.matrix_length0 }}
      matrix1: ${{ steps.print.outputs.matrix1 }}
      matrix_length1: ${{ steps.print.outputs.matrix_length1 }}
      matrix2: ${{ steps.print.outputs.matrix2 }}
      matrix_length2: ${{ steps.print.outputs.matrix_length2 }}
      matrix3: ${{ steps.print.outputs.matrix3 }}
      matrix_length3: ${{ steps.print.outputs.matrix_length3 }}
      matrix4: ${{ steps.print.outputs.matrix4 }}
      matrix_length4: ${{ steps.print.outputs.matrix_length4 }}
      matrix5: ${{ steps.print.outputs.matrix5 }}
      matrix_length5: ${{ steps.print.outputs.matrix_length5 }}
  run_pre_built_job0:
    name: Level 0 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    if: ${{ needs.pre_job.outputs.matrix_length0 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix0) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job1:
    name: Level 1 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job0
    if: ${{ always() && (needs.run_pre_built_job0.result == 'success' || needs.run_pre_built_job0.result
      == 'skipped') && needs.pre_job.outputs.matrix_length1 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix1) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job2:
    name: Level 2 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job1
    if: ${{ always() && (needs.run_pre_built_job1.result == 'success' || needs.run_pre_built_job1.result
      == 'skipped') && needs.pre_job.outputs.matrix_length2 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix2) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job3:
    name: Level 3 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job2
    if: ${{ always() && (needs.run_pre_built_job2.result == 'success' || needs.run_pre_built_job2.result
      == 'skipped') && needs.pre_job.outputs.matrix_length3 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix3) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job4:
    name: Level 4 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job3
    if: ${{ always() && (needs.run_pre_built_job3.result == 'success' || needs.run_pre_built_job3.result
      == 'skipped') && needs.pre_job.outputs.matrix_length4 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix4) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
  run_pre_built_job5:
    name: Level 5 ${{ matrix.name }}'
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job4
    if: ${{ always() && (needs.run_pre_built_job4.result == 'success' || needs.run_pre_built_job4.result
      == 'skipped') && needs.pre_job.outputs.matrix_length5 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix5) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_cache/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/get_steps_missing_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_cache
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} --run-all-steps
