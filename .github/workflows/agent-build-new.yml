name: Agent Build Refactored

on:
  push:
#    branches:
#      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

  schedule:
    - cron: '0 4 * * *'

permissions:
  contents: read

jobs:
  pre_job:
    runs-on: ubuntu-latest
    permissions:
      actions: write  # Needed for skip-duplicate-jobs job
      contents: read
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
      aws_private_key_name: CT_SCALYR_AGENT_GHA
      aws_security_group: github-actions-remote-access
      aws_prefix_list_id: pl-04a16228a97704d23
      aws_region: us-east-1
      aws_objects_name_prefix: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
      python_version: 3.8.13
      cache_version_suffix: v6
    steps:
#      - id: skip_check
#        uses: fkirc/skip-duplicate-actions@12aca0a884f6137d619d6a8a09fcc3406ced5281 # v4.0.0
#        with:
#          cancel_others: 'true'
#          github_token: ${{ github.token }}
      - name: Checkout repository
        uses: actions/checkout@v3

  run_pre_build_steps:
    name: "Run pre-built steps"
    needs:
      - pre_job
    uses: ./.github/workflows/run-pre-build-jobs.yml
    with:
      aws_private_key_name: ${{ needs.pre_job.outputs.aws_private_key_name }}
      aws_security_group: ${{ needs.pre_job.outputs.aws_security_group }}
      aws_prefix_list_id: ${{ needs.pre_job.outputs.aws_prefix_list_id }}
      aws_region: ${{ needs.pre_job.outputs.aws_region }}
      aws_objects_name_prefix: ${{ needs.pre_job.outputs.aws_objects_name_prefix }}
      python_version: ${{ needs.pre_job.outputs.python_version }}
      cache_version_suffix: ${{ needs.pre_job.outputs.cache_version_suffix }}
    secrets:
      CT_AWS_DEV_EC2_PRIVATE_KEY: ${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}
      CT_AWS_DEV_EC2_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
      CT_AWS_DEV_EC2_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE }}
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ }}


  build-linux-packages:
    name: "Build Linux packages"
    needs:
      - pre_job
      - run_pre_build_steps
    uses: ./.github/workflows/reusable-agent-build-linux-packages-new.yml
    with:
      aws_private_key_name: ${{ needs.pre_job.outputs.aws_private_key_name }}
      aws_security_group: ${{ needs.pre_job.outputs.aws_security_group }}
      aws_prefix_list_id: ${{ needs.pre_job.outputs.aws_prefix_list_id }}
      aws_region: ${{ needs.pre_job.outputs.aws_region }}
      aws_objects_name_prefix: ${{ needs.pre_job.outputs.aws_objects_name_prefix }}
    secrets:
      CT_AWS_DEV_EC2_PRIVATE_KEY: ${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}
      CT_AWS_DEV_EC2_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
      CT_AWS_DEV_EC2_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE }}
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ: ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ }}
#
#  build-windows-package:
#    name: "Build Windows package"
#    uses: ./.github/workflows/reusable-agent-build-windows.yml
#    secrets:
#      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#
#  build_tarball:
#    runs-on: ubuntu-20.04
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Install python
#        uses: actions/setup-python@v4
#        with:
#          python-version: "3.8.13"
#
#      - name: Build tarball
#        run: |
#          mkdir -p build/tarball/noarch
#          pushd build/tarball/noarch
#          python3 ../../../build_package.py tarball
#          popd
#
#      - name: Save tarball as artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: tarball-noarch
#          path: build
#          retention-days: 1
#
#      - name: Notify Slack on Failure
#        if: ${{ failure() && github.ref_name == 'master' }}
#        uses: act10ns/slack@ed1309ab9862e57e9e583e51c7889486b9a00b0f # v2.0.0
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        with:
#          status: ${{ job.status }}
#          steps: ${{ toJson(steps) }}
#          channel: '#eng-dataset-cloud-tech'
#
#
#  # Aggregate all agent build artifacts that we build by this workflow and put in a single artifact,
#  # so it's just need to download only one artifact, for example during a release process.
#  prepare-artifacts:
#    runs-on: ubuntu-20.04
#    needs:
#      - build-linux-packages
#      - build-windows-package
#      - build_tarball
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          path: /tmp/all_artifacts
#
#
#      - name: Prepare artifacts
#        run: |
#          mkdir -p /tmp/result_artifacts
#          cp -a /tmp/all_artifacts/linux-packages-*/. /tmp/result_artifacts
#          cp -a /tmp/all_artifacts/tarball-noarch/. /tmp/result_artifacts
#          cp -a /tmp/all_artifacts/windows-msi/. /tmp/result_artifacts
#
#
#
#      - name: Save result artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: result-artifacts
#          path: /tmp/result_artifacts
#          retention-days: 1

  clean-ec2-tests-objects:
    name: Remove ec2 test workflow prefix list entries
    if: ${{ always() }}
    needs:
      - pre-job
      - build-linux-packages
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare dev requirements.
        uses: ./.github/actions/prepare_python_with_dev_requirements
        with:
          python_version: ${{ needs.pre_job.outputs.python_version }}

      - name: Cleanup old prefix lists for ec2 test security group.
        env:
          AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
          AWS_PRIVATE_KEY_NAME: ${{ needs.pre_job.outputs.aws_private_key_name }}
          AWS_PRIVATE_KEY_PATH: "/tmp/private_key.pem"
          AWS_REGION: ${{ needs.pre_job.outputs.aws_region }}
          AWS_SECURITY_GROUP: ${{ needs.pre_job.outputs.aws_security_group }}
          AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ needs.pre_job.outputs.aws_prefix_list_id }}
          AWS_OBJECTS_NAME_PREFIX: ${{ needs.pre_job.outputs.aws_objects_name_prefix }}
        run: |
          venv/bin/python3 agent_build_refactored/tools/run_in_ec2/cleanup_ec2_objects.py
