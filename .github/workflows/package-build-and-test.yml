name: Packages build

on:
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
      os:
        required: true
        type: string

#      package-build-spec:
#        required: true
#        type: string
#
#      test-specs:
#        required: false
#        type: string

    secrets:
      SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN:
        required: true

env:
  DOCKER_BUILDKIT: 1
jobs:
  init:
    runs-on: ${{ inputs.os }}
    outputs:
      package-build-spec: ${{ steps.package-info.outputs.package-build-spec }}
      package-test-specs: ${{ steps.package-info.outputs.package-test-specs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.10'

      - id: package-info
        run: |
          python3 agent_tools/build_and_test_specs.py get-package-build-spec-info ${{ inputs.package_name }}
          python3 agent_tools/build_and_test_specs.py get-package-test-specs ${{ inputs.package_name }}
          echo "::set-output name=package-build-spec::$(python3 agent_tools/build_and_test_specs.py get-package-build-spec-info ${{ inputs.package_name }})"
          echo "::set-output name=package-test-specs::$(python3 agent_tools/build_and_test_specs.py get-package-test-specs ${{ inputs.package_name }})"

  build:
    runs-on: ${{ inputs.os }}
    needs: init
    strategy:
      matrix: ${{fromJSON(needs.init.outputs.package-build-spec)}}
#        package_type: ["deb_x86_64", "rpm_x86_64", "tar_x86_64", "deb_arm64", "rpm_arm64", "tar_arm64"]
#        os: [ubuntu-20.04]
#        python-version: ["3.8"]
#        include:
#          - package_type: ${{ inputs.package_name }}
#            os: ${{ inputs.os }}
#            python-version: "3.8"
#          - package_type: "k8s"
#            os: ubuntu-20.04
#            python-version: "3.8"
#          - package_type: "docker-json"
#            os: ubuntu-20.04
#            python-version: "3.8"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.10'


#      - name: Get information about deployers which are used to build '${{ matrix.package_type }}' package.
#        id: get-deployers-info
#        run: |
#          echo "::set-output name=deployer-names::$(python build_package.py get-build-spec ${{ matrix.package_type }} deployers)"
#          echo "::set-output name=deployer-base-image::$(python build_package.py get-build-spec ${{ matrix.package_type }} base-docker-image)"
#          echo "::set-output name=architecture::$(python build_package.py get-build-spec ${{ matrix.package_type }} architecture)"
#
#      - name: Prepare build environment by running appropriate deployer.
#        if: ${{ steps.get-deployers-info.outputs.deployer-names }}
#        id: prepare
#        uses: ./.github/actions/run-environment-deployer
#        with:
#          names: ${{ steps.get-deployers-info.outputs.deployer-names }}
#          base-docker-image: ${{ steps.get-deployers-info.outputs.deployer-base-image }}
#          architecture: ${{ steps.get-deployers-info.outputs.architecture }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Prepare build environment by running appropriate deployer.
        if: ${{ matrix.deployers }}
        id: prepare
        uses: ./.github/actions/run-environment-deployer
        with:
          names: ${{ matrix.deployers }}
          base-docker-image: ${{ matrix.base-docker-image }}
          architecture: ${{ matrix.architecture }}

      - name: Build.
        id: build
        shell: bash
        run: |
          python build_package.py ${{ inputs.package_name }} --output-dir agent-build-output
          #echo "::set-output name=package-filename-glob::$(python build_package.py get-build-spec ${{ matrix.package_type }} package-filename-glob)"

#      - name: Build frozen tests runner (if needed).
#        if: matrix.package_type != 'k8s' && !startsWith(matrix.package_type, 'docker-')
#        id: build-tests
#        shell: bash
#        run: |
#          python build_package.py build ${{ matrix.package_type }} --build-tests --output-dir tests-build-output
#          #echo "::set-output name=package-filename-glob::$(python build_package.py ${{ matrix.package_type }} package-filename-glob)"

      - name: Save the package.
        uses: actions/upload-artifact@v2
        with:
          name: package-${{ inputs.package_name }}
          path: |
            agent-build-output/${{ matrix.package-filename-glob }}*
#
#
#
#      - name: Save the frozen test script.
#        uses: actions/upload-artifact@v2
#        if: matrix.package_type != 'k8s' && !startsWith(matrix.package_type, 'docker-')
#        with:
#          name: "package-test-${{ matrix.package_type }}"
#          path: |
#            tests-build-output/package_test_runner*


  package-test:
    needs: build
    runs-on: ${{ inputs.os }}
    strategy:
      matrix: ${{fromJSON(inputs.test-specs) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install python.
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.10'

      - name: Prepare build environment by running appropriate deployer.
        if: ${{ matrix.deployers }}
        uses: ./.github/actions/run-environment-deployer
        with:
          names: ${{ matrix.deployers }}
          base-docker-image: ${{ matrix.base-docker-image }}
          architecture: ${{ matrix.architecture }}

      - name: Prepare environment for the tests.
        uses: ./.github/actions/run-environment-deployer
        with:
          names: 'base_environment'
          architecture: ${{ matrix.architecture }}
#
#
#      - name: "Get package file info"
#        id: get-package-info
#        run: |
#          #echo "::set-output name=package-filename-glob::$(python build_package.py ${{ matrix.package_type }} package-filename-glob)"
#          echo "::set-output name=package-type::$(python tests/package_tests/package_test_runner.py get ${{ matrix.target }} package-type)"
#
##      - name: "Get package type."
##        id: get-package-type
##        run: echo "::set-output name=package-type::$(python tests/package_tests/package_test_runner.py ${{ matrix.target }} package-filename-glob)"
#
      - name: Download package.
        uses: actions/download-artifact@v2
        with:
          name: package-${{ inputs.package_name }}
          path: ~/package
#
#      - name: Download package test (if presented).
#        uses: actions/download-artifact@v2
#        if: steps.get-package-info.outputs.package-type != 'k8s' && steps.get-package-info.outputs.package-type != 'docker-json'
#        with:
#          name: "package-test-${{ steps.get-package-info.outputs.package-type }}"
#          path: ~/package_test
#
      - name: Start minikube for the test of the kubernetes build.
        if: inputs.package_name == 'k8s'
        shell: bash
        run: |
          minikube start

      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
      - name: Make Kubernetes and docker package builder scripts executable.
        if: inputs.package_name == 'k8s' || inputs.package_name == 'docker-json'
        run: |
          chmod +x ~/package/*
#
#      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
#      - name: Make package test frozen binaries executable.
#        id: process-frozen-test-runner-path
#        if: steps.get-package-info.outputs.package-type != 'k8s' && steps.get-package-info.outputs.package-type != 'docker-json'
#        run: |
#          chmod +x ~/package_test/package_test_runner*
#
#          # set path to the frozen test runner as current step output.
#          echo "::set-output name=frozen_test_runner_path::$(ls ~/package_test/package_test_runner*)"
#
#
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Test.
        shell: bash
        env:
          SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
        run: |

          python3 tests/package_tests/package_test_runner.py \
            run \
            ${{ matrix.spec_name }} \
            --package-path ~/package/* \
            --scalyr-api-key "$SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN"










#  test:
#    needs: build
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        package_type: ["deb"]
#        os: ["ubuntu-20.04"]
#        docker-image: ["ubuntu:14.04", "ubuntu:16.04", "ubuntu:18.04", "ubuntu:20.04"]
#        python-version: [3.8]
#        include:
#          - package_type: "rpm"
#            os: ubuntu-20.04
#            docker-image: "centos:7"
#            python-version: "3.8"
#          - package_type: "rpm"
#            os: ubuntu-20.04
#            docker-image: "centos:8"
#            python-version: "3.8"
#          - package_type: "rpm"
#            os: ubuntu-20.04
#            docker-image: "amazonlinux:2"
#            python-version: "3.8"
#          - package_type: "tar"
#            os: ubuntu-20.04
#            docker-image: "ubuntu:14.04"
#            python-version: "3.8"
#          - package_type: "msi"
#            os: windows-2019
#            python-version: "3.8"
#          - package_type: "k8s"
#            os: ubuntu-20.04
#            python-version: "3.8"
#          - package_type: "docker-json"
#            os: ubuntu-20.04
#            python-version: "3.8"
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Download package.
#        uses: actions/download-artifact@v2
#        with:
#          name: "package-${{ matrix.package_type }}"
#          path: ~/package
#
#      - name: Download package test (if presented).
#        uses: actions/download-artifact@v2
#        if: matrix.package_type != 'k8s' && matrix.package_type != 'docker-json'
#        with:
#          name: "package-test-${{ matrix.package_type }}"
#          path: ~/package_test
#
#      - name: Start minikube for the test of the kubernetes build.
#        if: ${{ matrix.package_type == 'k8s' }}
#        shell: bash
#        run: |
#          minikube start
#
#      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
#      - name: Make Kubernetes and docker package builder scripts executable.
#        if: matrix.package_type == 'k8s' || matrix.package_type == 'docker-json'
#        run: |
#          chmod +x ~/package/*
#
#      # All downloaded artifacts lose their permissions, so we have to make script executable once more.
#      - name: Make package test frozen binaries executable.
#        if: matrix.package_type != 'k8s' && matrix.package_type != 'docker-json'
#        run: |
#          chmod +x ~/package_test/package_test_runner*
#
##      - name: Set up QEMU
##        id: qemu
##        uses: docker/setup-qemu-action@v1
##        with:
##          platforms: all
#
#      - name: Test.
#        shell: bash
#        env:
#          SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
#        run: |
#          # Define the package_test_path option only if package test file is presented in artifacts.
#          package_test_path="$(ls ~/package_test/package_test_runner* || true)"
#          if [ -f "${package_test_path}" ]; then
#            package_test_path_option="--package-test-path ${package_test_path}"
#          else
#            package_test_path_option=""
#          fi
#
#
#          python3 tests/package_tests/package_test_runner.py \
#            --package-type ${{ matrix.package_type }} \
#            --docker-image "${{ matrix.docker-image }}" \
#            --package-path ~/package/* \
#            ${package_test_path_option} \
#            --scalyr-api-key "$SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN"
