# IMPORTANT: Do not modify.
# This workflow file is generated by the script 'tools/cicd/cacheable_runner_steps_helper.py' from the template 'tools/cicd/reusable-run-cacheable-runner-steps-template.yml'.
# Modify those files in order to make changes to the workflow.
name: Run pre-built jobs.
on:
  workflow_call:
    inputs:
      python_version:
        type: string
      aws_private_key_name:
        type: string
      aws_region:
        type: string
      aws_security_group:
        type: string
      aws_prefix_list_id:
        type: string
      aws_objects_name_prefix:
        type: string
      cache_version_suffix:
        type: string
    secrets:
      CT_AWS_DEV_EC2_PRIVATE_KEY:
        required: true
      CT_AWS_DEV_EC2_ACCESS_KEY:
        required: true
      CT_AWS_DEV_EC2_SECRET_KEY:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ:
        required: true
permissions:
  contents: read
jobs:
  pre_job:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - name: Install the restore_steps_caches action dependencies
      working-directory: .github/actions/restore_steps_caches
      run: |
        npm install

        ls -al

        ls node_modules/.bin -al
    - name: Check that the workflow files are up to date
      run: |
        python3 tools/cicd/cacheable_runner_steps_helper.py update-files

        set +e
        git diff --exit-code
        EXIT_CODE=$?
        set -e

        if [ $EXIT_CODE -ne 0 ]; then
          echo -e "Files of the workflow are not up-to-date, please run the command 'python3 tools/cicd/cacheable_runner_steps_helper.py update-files' and commit required changes."
          exit 1
        fi
    - name: Get all steps ids
      id: get_all_steps_ids
      run: |
        echo "all_steps_ids_json=$(python3  tools/cicd/cacheable_runner_steps_helper.py get-all-steps-ids)" >> $GITHUB_OUTPUT
        echo "cache_version_suffix=$(python3 tools/cicd/cacheable_runner_steps_helper.py get-cache-version-suffix)" >> $GITHUB_OUTPUT

        cat $GITHUB_OUTPUT
    - name: Get missing caches steps
      id: get_missing_caches_steps
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ steps.get_all_steps_ids.outputs.all_steps_ids_json }}
        cache_version_suffix: ${{ steps.get_all_steps_ids.outputs.cache_version_suffix
          }}
        cache_root: agent_build_output/step_output
        lookup_only: true
    - name: Print missing steps caches matrices
      id: print_missing_caches_matrices
      shell: bash
      run: |
        cat <<< '${{ steps.get_missing_caches_steps.outputs.steps_ids_with_cache_hit }}' | \
          python3  tools/cicd/cacheable_runner_steps_helper.py get-missing-caches-matrices --github-step-output-file "${GITHUB_OUTPUT}"
        cat $GITHUB_OUTPUT
    outputs:
      stage_matrix0: ${{ steps.print_missing_caches_matrices.outputs.stage_matrix0
        }}
      stage_skip0: ${{ steps.print_missing_caches_matrices.outputs.stage_skip0 }}
      stage_matrix1: ${{ steps.print_missing_caches_matrices.outputs.stage_matrix1
        }}
      stage_skip1: ${{ steps.print_missing_caches_matrices.outputs.stage_skip1 }}
      stage_matrix2: ${{ steps.print_missing_caches_matrices.outputs.stage_matrix2
        }}
      stage_skip2: ${{ steps.print_missing_caches_matrices.outputs.stage_skip2 }}
      stage_matrix3: ${{ steps.print_missing_caches_matrices.outputs.stage_matrix3
        }}
      stage_skip3: ${{ steps.print_missing_caches_matrices.outputs.stage_skip3 }}
      stage_matrix4: ${{ steps.print_missing_caches_matrices.outputs.stage_matrix4
        }}
      stage_skip4: ${{ steps.print_missing_caches_matrices.outputs.stage_skip4 }}
      stage_matrix5: ${{ steps.print_missing_caches_matrices.outputs.stage_matrix5
        }}
      stage_skip5: ${{ steps.print_missing_caches_matrices.outputs.stage_skip5 }}
  stage_0:
    name: 0 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.stage_matrix0) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
        fail_on_cache_miss: true
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    if: ${{ needs.pre_job.outputs.stage_skip0 != 'true' }}
  stage_1:
    name: 1 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - stage_0
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.stage_matrix1) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
        fail_on_cache_miss: true
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    if: ${{ needs.pre_job.outputs.stage_skip1 != 'true' }}
  stage_2:
    name: 2 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - stage_1
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.stage_matrix2) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
        fail_on_cache_miss: true
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    if: ${{ needs.pre_job.outputs.stage_skip2 != 'true' }}
  stage_3:
    name: 3 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - stage_2
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.stage_matrix3) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
        fail_on_cache_miss: true
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    if: ${{ needs.pre_job.outputs.stage_skip3 != 'true' }}
  stage_4:
    name: 4 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - stage_3
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.stage_matrix4) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
        fail_on_cache_miss: true
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    if: ${{ needs.pre_job.outputs.stage_skip4 != 'true' }}
  stage_5:
    name: 5 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - stage_4
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.stage_matrix5) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
        fail_on_cache_miss: true
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
      if: ${{ matrix.name != 'All Steps Are Reused From Cache' }}
    if: ${{ needs.pre_job.outputs.stage_skip5 != 'true' }}
