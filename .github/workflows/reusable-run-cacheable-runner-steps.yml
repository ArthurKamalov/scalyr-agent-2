# IMPORTANT: Do not modify.
# This workflow file is generated by the script 'agent_build_refactored/cicd/cacheable_runner_steps_helper.py' from the template 'agent_build_refactored/cicd/reusable-run-cacheable-runner-steps-template.yml'.
# Modify those files in order to make changes to the workflow.
name: Run pre-built jobs.
on:
  workflow_call:
    inputs:
      python_version:
        type: string
      aws_private_key_name:
        type: string
      aws_region:
        type: string
      aws_security_group:
        type: string
      aws_prefix_list_id:
        type: string
      aws_objects_name_prefix:
        type: string
      cache_version_suffix:
        type: string
    secrets:
      CT_AWS_DEV_EC2_PRIVATE_KEY:
        required: true
      CT_AWS_DEV_EC2_ACCESS_KEY:
        required: true
      CT_AWS_DEV_EC2_SECRET_KEY:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ:
        required: true
permissions:
  contents: read
jobs:
  dummy:
    runs-on: ubuntu-20.04
    steps:
    - name: Run
      run: exit 0
  pre_job:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
    - uses: actions/cache@v3
      id: npm-cache
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    - name: Install the restore_steps_caches action dependencies
      working-directory: .github/actions/restore_steps_caches
      run: |
        npm install

        ls -al

        ls node_modules/.bin -al
    - name: Check that the workflow files are up to date
      run: |
        python3 agent_build_refactored/cicd/cacheable_runner_steps_helper.py update-files

        set +e
        git diff --exit-code
        EXIT_CODE=$?
        set -e

        if [ $EXIT_CODE -ne 0 ]; then
          echo -e "Files of the workflow are not up-to-date, please run the command 'python3 agent_build_refactored/cicd/cacheable_runner_steps_helper.py update-files' and commit required changes."
          exit 1
        fi
    - name: Get all steps ids
      id: get_all_steps_ids
      run: |
        echo "all_steps_ids_json=$(python3  agent_build_refactored/cicd/cacheable_runner_steps_helper.py get-all-steps-ids)" >> $GITHUB_OUTPUT
        echo "cache_version_suffix=$(python3 agent_build_refactored/cicd/cacheable_runner_steps_helper.py get-cache-version-suffix)" >> $GITHUB_OUTPUT

        cat $GITHUB_OUTPUT
    - name: Get missing caches steps
      id: get_missing_caches_steps
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ steps.get_all_steps_ids.outputs.all_steps_ids_json }}
        cache_version_suffix: ${{ steps.get_all_steps_ids.outputs.cache_version_suffix
          }}
        cache_root: agent_build_output/step_output
        lookup_only: true
    - name: Print missing steps caches matrices
      id: print_missing_caches_matrices
      shell: bash
      run: |
        cat <<< '${{ steps.get_missing_caches_steps.outputs.missing_steps_ids_json }}' > /tmp/missing_steps_ids.json
        ls /tmp/ -al
        echo "MISSS"
        cat /tmp/missing_steps_ids.json
        echo "MISSSEND"
        python3  agent_build_refactored/cicd/cacheable_runner_steps_helper.py get-missing-caches-matrices --missing-steps-ids-file /tmp/missing_steps_ids.json > /tmp/missing_cache_matrices.json
        i=0
        jq -c '.[]' /tmp/missing_cache_matrices.json | while read -r matrix; do 
          echo "matrix${i}=$(echo "$matrix" | jq -c '.')" >> $GITHUB_OUTPUT
          echo "matrix_length${i}=$(echo "$matrix" | jq -c '.["include"] | length')" >> $GITHUB_OUTPUT
          ((i=i+1))
        done
        cat $GITHUB_OUTPUT
    outputs:
      matrix0: ${{ steps.print_missing_caches_matrices.outputs.matrix0 }}
      matrix_length0: ${{ steps.print_missing_caches_matrices.outputs.matrix_length0
        }}
      matrix1: ${{ steps.print_missing_caches_matrices.outputs.matrix1 }}
      matrix_length1: ${{ steps.print_missing_caches_matrices.outputs.matrix_length1
        }}
      matrix2: ${{ steps.print_missing_caches_matrices.outputs.matrix2 }}
      matrix_length2: ${{ steps.print_missing_caches_matrices.outputs.matrix_length2
        }}
      matrix3: ${{ steps.print_missing_caches_matrices.outputs.matrix3 }}
      matrix_length3: ${{ steps.print_missing_caches_matrices.outputs.matrix_length3
        }}
      matrix4: ${{ steps.print_missing_caches_matrices.outputs.matrix4 }}
      matrix_length4: ${{ steps.print_missing_caches_matrices.outputs.matrix_length4
        }}
      matrix5: ${{ steps.print_missing_caches_matrices.outputs.matrix5 }}
      matrix_length5: ${{ steps.print_missing_caches_matrices.outputs.matrix_length5
        }}
  run_pre_built_job0:
    name: 0 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    if: ${{ needs.pre_job.outputs.matrix_length0 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix0) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
  run_pre_built_job1:
    name: 1 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job0
    if: ${{ always() && (needs.run_pre_built_job0.result == 'success' || needs.run_pre_built_job0.result
      == 'skipped') && needs.pre_job.outputs.matrix_length1 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix1) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
  run_pre_built_job2:
    name: 2 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job1
    if: ${{ always() && (needs.run_pre_built_job1.result == 'success' || needs.run_pre_built_job1.result
      == 'skipped') && needs.pre_job.outputs.matrix_length2 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix2) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
  run_pre_built_job3:
    name: 3 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job2
    if: ${{ always() && (needs.run_pre_built_job2.result == 'success' || needs.run_pre_built_job2.result
      == 'skipped') && needs.pre_job.outputs.matrix_length3 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix3) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
  run_pre_built_job4:
    name: 4 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job3
    if: ${{ always() && (needs.run_pre_built_job3.result == 'success' || needs.run_pre_built_job3.result
      == 'skipped') && needs.pre_job.outputs.matrix_length4 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix4) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
  run_pre_built_job5:
    name: 5 ${{ matrix.name }}
    runs-on: ubuntu-20.04
    needs:
    - pre_job
    - run_pre_built_job4
    if: ${{ always() && (needs.run_pre_built_job4.result == 'success' || needs.run_pre_built_job4.result
      == 'skipped') && needs.pre_job.outputs.matrix_length5 != '0' }}
    strategy:
      matrix: ${{ fromJSON(needs.pre_job.outputs.matrix5) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Prepare dev requirements.
      uses: ./.github/actions/prepare_python_with_dev_requirements
      with:
        python_version: ${{ inputs.python_version }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      with:
        driver-opts: network=host
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        image: tonistiigi/binfmt:qemu-v6.2.0
        platforms: all
    - name: Prepare SSH
      id: prepare-ssh
      shell: bash
      run: |
        echo '${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}' > /tmp/private_key.pem
        chmod 600 /tmp/private_key.pem
        eval `ssh-agent -s`

        cat "/tmp/private_key.pem" | ssh-add -
        echo "ssh_auth_sock=${SSH_AUTH_SOCK}" >> $GITHUB_OUTPUT
    - name: Cache step
      id: cache-step
      uses: actions/cache@v3
      with:
        path: |
          agent_build_output/step_output/${{ matrix.step_id }}
        key: ${{ matrix.step_id }}_${{ matrix.cache_version_suffix }}
    - name: Get required steps caches
      id: get_required_steps_caches
      uses: ./.github/actions/restore_steps_caches
      with:
        steps_ids: ${{ toJSON(matrix.required_steps) }}
        cache_version_suffix: ${{ matrix.cache_version_suffix }}
        cache_root: agent_build_output/step_output
    - name: Run cached step
      shell: bash
      env:
        SSH_AUTH_SOCK: ${{ steps.prepare-ssh.outputs.ssh_auth_sock }}
        AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
        AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
        AWS_PRIVATE_KEY_PATH: /tmp/private_key.pem
        AWS_REGION: ${{ inputs.aws_region }}
        AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
        AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
        AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
      run: python3 agent_build_refactored/scripts/runner_helper.py ${{ matrix.step_runner_fqdn
        }} run-cacheable-step
