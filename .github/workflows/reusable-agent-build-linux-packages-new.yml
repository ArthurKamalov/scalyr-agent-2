name: Agent Linux Packages Build Refactored

on:
  workflow_call:
    inputs:
      aws_private_key_name:
        type: string
      aws_region:
        type: string
      aws_security_group:
        type: string
      aws_prefix_list_id:
        type: string
      aws_objects_name_prefix:
        type: string
      python_version:
        type: string

    secrets:
      CT_AWS_DEV_EC2_PRIVATE_KEY:
        required: true
      CT_AWS_DEV_EC2_ACCESS_KEY:
        required: true
      CT_AWS_DEV_EC2_SECRET_KEY:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE:
        required: true
      CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ:
        required: true

env:
  DOCKER_BUILDKIT: 1
  # Set this variable to tell the agent build code that it runs in CI/CD and it needs to use caching.
  AGENT_BUILD_IN_CICD: "1"

# This job skips another workflows with identical content and also generates strategy matrices for all further jobs.
# Since we can do a "master" run (on push and PR to a master branch) and "non-master" run, it generates matrices with different
#  size according to that information.
jobs:
  build-managed-packages:
    name: Build managed package ${{ matrix.packages.name }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        packages:
          - { "name": "deb-aio-x86_64" }
          - { "name": "rpm-aio-x86_64" }
          - { "name": "deb-aio-arm64" }
          - { "name": "rpm-aio-arm64" }
          - { "name": "deb-non-aio" }
          - { "name": "rpm-non-aio" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare dev requirements.
        uses: ./.github/actions/prepare_python_with_dev_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7 # v2.0.0
        with:
          driver-opts: network=host

      - name: Get required steps ids
        id: get_required_steps_ids
        run: |
          echo "all_required_steps=$(python3 build_package_new_refactored.py ${{ matrix.packages.name }} --get-all-steps)" >> $GITHUB_OUTPUT
          echo "cache_version_suffix=$(python3 tools/cicd/cacheable_runner_steps_helper.py get-cache-version-suffix)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Get required steps caches
        id: get_required_steps_caches
        uses: ./.github/actions/restore_steps_caches
        with:
          steps_ids: ${{ steps.get_required_steps_ids.outputs.all_required_steps }}
          cache_version_suffix: ${{ steps.get_required_steps_ids.outputs.cache_version_suffix }}
          cache_root: agent_build_output/step_output

      - name: Build managed package with builder '${{ matrix.packages.name }}'
        run: |
            python3 build_package_new_refactored.py ${{ matrix.packages.name }} build 

      - name: Save packages as artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-packages-${{ matrix.packages.name }}
          path: build
          retention-days: 1

  test_managed_packages:
    name: Test package on ${{ matrix.configuration.distro-name }}-${{ matrix.configuration.remote-machine-type }}, ${{ matrix.configuration.name }}
    if: github.ref_type == 'branch' && github.ref_name != '_release_build'
    needs:
      - build-managed-packages

    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - { "name": "deb-aio-x86_64", "arch": "x86_64", "distro-name": "ubuntu2204",    "remote-machine-type": "ec2"    }
          - { "name": "deb-aio-x86_64", "arch": "x86_64", "distro-name": "ubuntu2004",    "remote-machine-type": "ec2"    }
          - { "name": "deb-aio-x86_64", "arch": "x86_64", "distro-name": "ubuntu1804",    "remote-machine-type": "ec2"    }
          - { "name": "deb-aio-x86_64", "arch": "x86_64", "distro-name": "ubuntu1604",    "remote-machine-type": "ec2"    }
          - { "name": "deb-aio-x86_64", "arch": "x86_64", "distro-name": "ubuntu1404",    "remote-machine-type": "docker" }
          - { "name": "deb-aio-x86_64", "arch": "x86_64", "distro-name": "debian10",      "remote-machine-type": "ec2"    }
          - { "name": "deb-aio-x86_64", "arch": "x86_64", "distro-name": "debian11",      "remote-machine-type": "docker" }
          - { "name": "rpm-aio-x86_64", "arch": "x86_64", "distro-name": "centos8",       "remote-machine-type": "docker" }
          - { "name": "rpm-aio-x86_64", "arch": "x86_64", "distro-name": "centos7",       "remote-machine-type": "ec2"    }
          - { "name": "rpm-aio-x86_64", "arch": "x86_64", "distro-name": "centos6",       "remote-machine-type": "docker" }
          - { "name": "rpm-aio-x86_64", "arch": "x86_64", "distro-name": "amazonlinux2",  "remote-machine-type": "ec2"    }
          - { "name": "deb-aio-arm64",  "arch": "arm64",  "distro-name": "ubuntu1404",    "remote-machine-type": "docker" }
          - { "name": "rpm-aio-arm64",  "arch": "arm64",  "distro-name": "centos7",       "remote-machine-type": "docker" }
          - { "name": "deb-non-aio",    "arch": "x86_64", "distro-name": "ubuntu1404",    "remote-machine-type": "docker" }
          - { "name": "deb-non-aio",    "arch": "x86_64", "distro-name": "ubuntu2204",    "remote-machine-type": "docker" }
          - { "name": "rpm-non-aio",    "arch": "x86_64", "distro-name": "centos7",       "remote-machine-type": "docker" }
          - { "name": "rpm-non-aio",    "arch": "x86_64", "distro-name": "amazonlinux2",  "remote-machine-type": "docker" }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare dev requirements.
        uses: ./.github/actions/prepare_python_with_dev_requirements
        with:
          python_version: ${{ inputs.python_version }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2
        with:
          image: tonistiigi/binfmt:qemu-v6.2.0
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7 # v2.0.0
        with:
          driver-opts: network=host

#
#      - name: Prepare environment.
#        uses: ./.github/actions/execute-runner
#        with:
#          runner-fqdn: "agent_build_refactored.__init__.BuildTestEnvironment"

      - name: Download built packages.
        uses: actions/download-artifact@v3
        with:
          name:  linux-packages-${{ matrix.configuration.name }}
          path: /tmp/packages

#      - name: Prepare everything that is needed by builder '${{ matrix.configuration.name }}'
#        uses: ./.github/actions/execute-runner
#        with:
#          runner-fqdn: ${{ matrix.builder-fqdn }}

#      - name: Prepare cached steps for package '${{ matrix.configuration.name }}' tests
#        uses: ./.github/actions/execute-runner
#        with:
#          runner-fqdn: "tests.end_to_end_tests.run_in_remote_machine.portable_pytest_runner.PortablePytestRunnerBuilder_${{ matrix.arch }}"


      - name: Get required steps ids
        id: get_required_steps_ids
        run: |
          echo "builder_required_steps_ids=$(python3 build_package_new_refactored.py ${{ matrix.configuration.name }} --get-all-steps)" >> $GITHUB_OUTPUT
          echo "portable_test_runner_required_steps_ids=$(python3 agent_build_refactored/scripts/runner_helper.py tests.end_to_end_tests.run_in_remote_machine.portable_pytest_runner.PortablePytestRunnerBuilder${{ matrix.configuration.arch }} --get-all-steps)" >> $GITHUB_OUTPUT
          echo "repo_builder_required_steps_ids=$(python3 agent_build_refactored/scripts/runner_helper.py tests.end_to_end_tests.managed_packages_tests.conftest.RepoBuilder --get-all-steps)" >> $GITHUB_OUTPUT
          echo "cache_version_suffix=$(python3 tools/cicd/cacheable_runner_steps_helper.py get-cache-version-suffix)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Get required steps caches
        id: get_portable_test_runner_required_steps_caches
        uses: ./.github/actions/restore_steps_caches
        with:
          steps_ids: ${{ steps.get_required_steps_ids.outputs.portable_test_runner_required_steps_ids }}
          cache_version_suffix: ${{ steps.get_required_steps_ids.outputs.cache_version_suffix }}
          cache_root: agent_build_output/step_output

      - name: Get required steps caches
        id: get_repo_builder_required_steps_caches
        uses: ./.github/actions/restore_steps_caches
        with:
          steps_ids: ${{ steps.get_required_steps_ids.outputs.repo_builder_required_steps_ids }}
          cache_version_suffix: ${{ steps.get_required_steps_ids.outputs.cache_version_suffix }}
          cache_root: agent_build_output/step_output

      - name: Get required steps caches
        id: get_required_steps_caches
        uses: ./.github/actions/restore_steps_caches
        with:
          steps_ids: ${{ steps.get_required_steps_ids.outputs.builder_required_steps_ids }}
          cache_version_suffix: ${{ steps.get_required_steps_ids.outputs.cache_version_suffix }}
          cache_root: agent_build_output/step_output

      - name: Test '${{ matrix.configuration.name }}' packages
        env:
          AWS_ACCESS_KEY: ${{ secrets.CT_AWS_DEV_EC2_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CT_AWS_DEV_EC2_SECRET_KEY }}
          AWS_PRIVATE_KEY_NAME: ${{ inputs.aws_private_key_name }}
          AWS_PRIVATE_KEY_PATH: "/tmp/private_key.pem"
          AWS_REGION: ${{ inputs.aws_region }}
          AWS_SECURITY_GROUP: ${{ inputs.aws_security_group }}
          AWS_SECURITY_GROUPS_PREFIX_LIST_ID: ${{ inputs.aws_prefix_list_id }}
          AWS_OBJECTS_NAME_PREFIX: ${{ inputs.aws_objects_name_prefix }}
        run: |
          echo "${{ secrets.CT_AWS_DEV_EC2_PRIVATE_KEY }}" > /tmp/private_key.pem
          chmod 600 /tmp/private_key.pem

          python3 -m pytest tests/end_to_end_tests/managed_packages_tests \
            -s \
            --builder-name ${{ matrix.configuration.name }} \
            --distro-name ${{ matrix.configuration.distro-name }} \
            --remote-machine-type ${{ matrix.configuration.remote-machine-type }} \
            --packages-source-type dir \
            --packages-source /tmp/packages \
            --scalyr-api-key ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_WRITE }} \
            --scalyr-api-read-key ${{ secrets.CT_SCALYR_TOKEN_PROD_US_CLOUDTECH_TESTING_READ }} \
            --test-session-suffix ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

