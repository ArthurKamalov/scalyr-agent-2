name: 'Run Scalyr Agent package test.'
description: ""
inputs:
  package_type:
    description: ''
    required: true

  docker-image:
    description: ''
    required: false

  ami-image:
    description: ''
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download package.
      uses: actions/download-artifact@v2
      with:
        name: "package-${{ inputs.package_type }}"
        path: ~/package

    - name: Download package test (if presented).
      uses: actions/download-artifact@v2
      if: inputs.package_type != 'k8s' && inputs.package_type != 'docker-json'
      with:
        name: "package-test-${{ inputs.package_type }}"
        path: ~/package_test

    - name: Start minikube for the test of the kubernetes build.
      if: ${{ inputs.package_type == 'k8s' }}
      shell: bash
      run: |
        minikube start

    # All downloaded artifacts lose their permissions, so we have to make script executable once more.
    - name: Make Kubernetes and docker package builder scripts executable.
      if: inputs.package_type == 'k8s' || inputs.package_type == 'docker-json'
      run: |
        chmod +x ~/package/*

    # All downloaded artifacts lose their permissions, so we have to make script executable once more.
    - name: Make package test frozen binaries executable.
      if: inputs.package_type != 'k8s' && inputs.package_type != 'docker-json'
      run: |
        chmod +x ~/package_test/package_test_runner*

    #      - name: Set up QEMU
    #        id: qemu
    #        uses: docker/setup-qemu-action@v1
    #        with:
    #          platforms: all

    - name: Test.
      shell: bash
      env:
        SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN: ${{ secrets.SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN }}
      run: |
        # Define the package_test_path option only if package test file is presented in artifacts.
        package_test_path="$(ls ~/package_test/package_test_runner* || true)"
        if [ -f "${package_test_path}" ]; then
          package_test_path_option="--package-test-path ${package_test_path}"
        else
          package_test_path_option=""
        fi


        python3 tests/package_tests/package_test_runner.py \
          --package-type ${{ inputs.package_type }} \
          --docker-image "${{ inputs.docker-image }}" \
          --package-path ~/package/* \
          ${package_test_path_option} \
          --scalyr-api-key "$SCALYR_PROD_CLOUDTECH_TESTING_WRITE_TOKEN"
