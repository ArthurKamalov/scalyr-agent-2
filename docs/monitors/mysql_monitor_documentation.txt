MySQL Monitor

The MySQL monitor allows you to collect data about the usage and performance of your MySQL server.

Each monitor can be configured to monitor a specific MySQL instance, thus allowing you to configure alerts and the dashboard entries independently (if desired) for each instance.

In addition to, the monitor logs additional MySQL metrics that may be worth exploring beyond the details below.


Monitor

The MySQL monitor is included with the Scalyr agent.  In order to configure it, you will need to add it's monitor configuration to the Scalyr agent config file.  To configure it, you will need the following pieces of information:

    - A MySQL user with administrative privileges (username)
        - the user needs to be able to have access to executing queries against the information_schema as well as assorted global status information
    - The pasword for this user
    
Additionally, you might need to know either the location of the socket MySQL uses on the system or the hostname (or IP) and port the server is bound to.  These two options are referenced by using either "database_socket" or "database_hostport".  Specifying "default" for either will work with most Linux based installs.

A basic MySQL monitor configuration entry might resemble:
  monitors: [
    {
        module: "scalyr_agent.builtin_monitors.mysql_monitor",
        database_socket: "default",
        database_username: "root",
        database_password: "password"
    }
  ]
    
If you were running two instances of MySQL, one as the system default and the other with the socket located at "/var/run/mysqld_instance2/mysqld.sock", then you would configure two monitor entries as follows:

  monitors: [ 
    {
        module: "scalyr_agent.builtin_monitors.mysql_monitor",
        database_socket: "default",
        database_username: "root",
        database_password: "password",
        id: "inventory"
    },
    {
        module: "scalyr_agent.builtin_monitors.mysql_monitor",
        database_socket: "/var/run/mysqld_instance2/mysqld.sock",
        database_username: "root2",
        database_password: "password2",
        id: "users"
    }
  ]

Note the "id" field in the configurations.  This is an optional field that allows you to specify an identifier specific to a particular database and will make it easier to filter on metrics specific to the database.


MySQL Metrics

MySQL Monitor Data Categories
  
The monitor emits a variety of types of data in different categories.  Each of theadditional data that may be of use.  The categories of the data generated are as follows:
  
- mysql.global
    These values are the output of the "SHOW GLOBAL STATUS" query.  Within MySQL documentation, the values emitted are typically discussed in the MySQL documentation in the chapter titled "Server Status Variables".
    
- mysql.innodb
    If the MySQL configuration has the InnoDB engine configured, stats about InnoDB usage will be emitted under this category.  The discussion of InnoDB engine information is discussed within the MySQL documentation under the chapter titled "SHOW ENGINE INNODB STATUS and the InnoDB Monitors".
    
- mysql.process
    The result of processing the data from "SHOW PROCESSLIST".  The data shows the types of commands being run and the number of threads performing each.
    
- mysql.vars
    These values are the current configuration for the MySQL server.  Most of these values reflect the default values set or those loaded from the MySQL configuration file.  Over a particular run of the MySQL instance, these values likely will not change.  A discussion of what each of the values is can be found in the MySQL documentation in the chapter titled "Using System Variables".
    
- mysql.slave
    If your MySQL instance is configured as a slave server, the values from "SHOW SLAVE STATUS" are under this category.  MySQL documentation discusses the values here under the chapter titled "Checking Replication Status".
    
- mysql.derived
    These values are a set of derived values are calculations based upon raw values in the other categories.  In general, the values are measured against the uptime of the database.

The exact metrics put out by the MySQL monitor will depend upon the version of MySQL you are running, your configuration, etc.  Below we give an example and explanation of some of that might be useful.  Consulting the MySQL documentation sections mentioned above will provide additional information.


MySQL.Global

- mysql.global.aborted_clients
    The number of connections abourted because the client died or didn't close the connection properly.  The value is relative to the uptime of the server.

- mysql.global.aborted_connects
    The number of failed connection attempts.  The value is relative to the uptime of the server.

- mysql.global.bytes_received
    How much data has been sent to the database from all clients.  The value is relative to the uptime of the server.

- mysql.global.bytes_sent
    How much data has been sent from the database to all clients.  The value is relative to the uptime of the server.

- mysql.global.com_* 
    How many of each type of command have been issues against the server.  Please see the "Server Status Variables" chapter of the MySQL documentation for the complete list.

- mysql.global.connections
    Total number of connection attempts (successful and failed).  The value is relative to the uptime of the server.
    
- mysql.global.key_blocks_unused
    The total number of keyblocks unused at the time of the monitor check.  A high number indicates that the key cache might be large.
      
- mysql.global.key_blocks_used
    Maximum number of key blocks used at any one point.  Indicates a high water mark of the number used.  The value is relative to the uptime of the server.

- mysql.global.max_used_connections
    High water mark for the total number of connections used at any one time since the server was started.

- mysql.global.slow_queries
    The total number of queries over the uptime of the server that exceeded the "long_query_time" configuration.

MySQL.innoDB

- mysql.innodb.oswait_array.reservation_count 
    A measure of how actively innodb uses it's internal sync array.  Specifically, how frequently slots are allocated.

- mysql.innodb.oswait_array.signal_count 
    As above, part of the measure of activity of the internal sync array, in this case how frequently threads are signaled using the sync array.
    
- mysql.innodb.locks.spin_waits 
- mysql.innodb.locks.rounds 
- mysql.innodb.locks.os_waits
    Three values that indicate how efficiently InnoDB locking is working.  'spin_waits' is the number of times a thread tried to get a mutex that wasn't available.  'rounds' is the number of times the threads looped through the spin-wait cycle.  'os_waits' is the number of times a thread gave up spin-waiting and went to sleep.  These values are cumulative relative to the uptime of the server.

- mysql.innodb.history_list_length 
    The number of unpurged transactions in the internal undo buffer.  It typically increases while transactions with updates are run and will decrease once the internal purge runs.

- mysql.innodb.ibuf.size 
- mysql.innodb.ibuf.free_list_len 
- mysql.innodb.ibuf.seg_size 
    Details about the insert buffer and status of the hash.  "size" is the insert buffer size.  "free_list_len" is the length of it's free list.  "seg_size" is the size of the segment.

- mysql.innodb.ibuf.inserts
- mysql.innodb.ibuf.merged_recs
- mysql.innodb.ibuf.merges
    A measure of the activity within the insert buffer.  "inserts" is the total number of inserts in the insert buffer.  "merged_recs" is the total number of records merged.  "merges" is the total number of merges required to make the merges.  These values are cumulative relative to the uptime of the server.
    
- mysql.innodb.queries_queued
    The number of queries waiting to be processed.  The value is based on the time the monitor sample is run.

- mysql.innodb.opened_read_views 
    The number of views into the db, this is "started transactions" which have no current statement actively operating.

MySQL.Process

The details under "mysql.process" show the number of current operations in process grouped by type.  The values are based on the point in time the monitor samples the database and will thus be dynamic as to what it shows.  For instance, if there was one thread performing a query and two sleeping, the values put out might look like:

    mysql.process.query 1
    mysql.process.sleep 2


MySQL.Vars

The number that make up the "mysql.vars" space is quite extensive and will generally be static for the current uptime of the database (unless the administrator or other individual actively modifies a value).  They are included to allow for calculations to be performed, similar to those currently provided under "mysql.derived".  An example of a value that would be useful is "mysql.vars.long_query_time", this value gives the number of seconds which triggers an increment of "mysql.global.slow_queries".

For a complete list of the available variables, please consult the MySQL manual section titled "Using System Variables".  The values will be emitted from the monitor using the format "mysql.vars.<variable name>".

MySQL.Derived

- mysql.derived.slow_query_percentage
    Measure of what percentage of queries are taking a long time to execute.  The value of what defines a "long time" is controlled by the variable "long_query_time" within the MySQL config file (the default as of MySQL 5.0 is 10 seconds).  The higher the percentage, the more your server is being kept busy fulfilling requests and the possible higher load on your server. 

- mysql.derived.connections_used_percentage
    Measure, as a percentage, of how many of simultaneous connections were used out of the number of connections configured within the MySQL configuration file.  If connections run out, client requests will be blocked.  A high percentage could indicate an application not making efficient use of connections (for instance, not caching an existing connection) or it could indicate more clients connecting than anticipated.
    
- mysql.derived.aborted_connections_percentage
    A percentage of client connection attempts that fail to connect.  Typical reasons include a client doesn't have permission to connect to the database (or invalid password), a corrupt connection packet from the client, or the client is slow in sending it's connect message.  This could indicate something wrong with the clients or possibly even attempts to break into the server.

- mysql.derived.aborted_clients_percentage
    A measure of the number of clients that disconnect improperly (the don't close the connection).  This could indicate a poorly written client, inactivity on the part of clients, or possibly a problematic connection to the database.

- mysql.derived.read_percentage
    Measure of what percentage of database activity is reads.  Depending on your configuration, a high read percentage could be expected or might be a problem.  If you have setup read slaves and write masters and the masters show heavy reads, that could indicate a problem.

- mysql.derived.write_percentage
    Measure of what percentage of database activity is writes.  Writes are generally quite costly and could impact read performance.

- mysql.derived.query_cache_efficiency
    Measue of what percentage of queries are cached.  A higher percentage means that the query will be more responsive.  A low percentage could indicate that queries aren't used that often or the query cache size is not sufficient to keep the queries that do get made in memory.

- mysql.derived.joins_without_indexes
    A count of the number of joins performing table scans that do not use indices as well as the joins that check for key usage after each row.  If this value is greater than 0, it could indicate missing or improper indexes on your tables.
    
- mysql.derived.table_cache_hit_rate
    How efficient is the table cache being used?  If the hit rate is low, then increasing the size of the table cache could be beneficial.  Note, that the larger the table cache, however, the more file descriptors are used by the system.
    
- mysql.derived.open_file_percentage
    Of the allowed number of open files, what percentage of them are open.  The higher the percentage, the more file descriptors MySQL is using and the likelihood of operations being delayed (or failing) if too many files are open.  A solution may be as simple as uping the "open_file_limit" in the MySQL config.

- mysql.derived.immediate_table_lock_percentage
    What percentage of requests to lock a table are granted immediately versus having to wait?  For instance, is another operation locking the table.  If this value is low and there are performance issues, it might be worth considering looking at the table structure or possibly replication.

- mysql.derived.thread_cache_hit_rate
    For each connection, a thread is needed.  If this value is low, it indicates that either you have unexpected traffic loads or need to allocate more resources to the thread cache.
    
- mysql.derived.tmp_disk_table_percentage
    When MySQL needs to create a temp table (for instance due to a join), how many of the tables created need to be written to disk?  A high percentage could indicate that either your database operations are creating temporary tables that are large or you need to increase the space allocated for in memory temp tables.
    
            
Alerts

You can setup alerts on any of the metrics mentioned above.  Some useful alerts to understand the behavior of your database usage would be:

- mysql.derived.read_percentage (or mysql.derived.write_percentage)
    This will allow you to understand the nature of the transactions on your database.  In general, one knows the expected behavior of an application in rough terms of reads to writes on the DB.  So, if you are expecting roughly 25% writes, 75% reads, setting an alert on writes hitting 40% or more might be useful to note a difference in application behavior.
    
- mysql.derived.slow_query_percentage
    Too many slow queries can affect the overall load and performance of the database.  Most queries should be performant, so if you are seeing a relatively high percentage of such it might be worth using the various MySQL tools to investigate the slow queries.  Or maybe, if slow queries occur at only certain times, being alerted to the incident would allow coordination with other parts of the system.
    
Say you wanted to create an alert when the average "mysql.derived.read_percentage" dropped below 60% or when the "mysql.derived.slow_query_percentage" jumped to 20%, for each you would need to do the following:

    1) Go to the MySQL dashboard
    2) Click on the appropriate graph
    3) This will bring up the graph edit box at the top, select Save Search -> As Alert
    4) In the Alert edit dialog that pops up:
        - For "mysql.derived.read_percentage":
            - Select "less" from the dropdown
            - Enter the value "60"
            - Click add
        - For "mysql.derived.slow_query_percentage":
            - Select "greater" from the dropdown
            - Enter the value "20"
            - Click add
        - In between each of the above, you will need to repeat steps 2 and 3
            

MySQL Monitor Configuration

The MySQL monitor configuration entry supports the following combination of entries:

- module: "scalyr_agent.builtin_monitors.mysql_monitor"
    This is required to invoke the MySQL monitor.

- database_username:    "<username>"
    This value is required.
    The name of the user to connect to the MySQL database.
    
- database_password:    "<password>"
    This value is required.
    The password of the user to connect to the MySQL database.
    
One of the following, depending on your connection type.

- For socket connections:
    - database_socket:  "<path>"
        When using "socket" connection type, this value specifies the location of the mysql socket file.  If not specified, the default for the system (if available) is used.  For systems with multiple mysql instances should specify the location to be safe.

- For "host:port" connections:
    - database_hostport:  "<host>:<port>"
        When using the "host:port" connection type, this value specifies the host to connect to.  By default, this is "localhost:3306" and shouldn't need to change when monitoring the local machine.  To enable defaults, specify the value "default".  It can be just "<host>" to specify the host on the default port.  Or it can be the full "<host>:<port>".
    
    
The skeleton MySQL monitor entry is outlined here:
    
    {
        module: "scalyr_agent.builtin_monitors.mysql_monitor",
   
        // Either "database_socket" or "database_hostport" is REQUIRED to indicate the type of connection being used.
        
        // database_socket:  "<path to socket file>"
        //      When using "socket" connection type, this value specifies the location 
        //      of the mysql socket file.  If you specify "default", the  
        //      default for the system (if available) is used.  For systems with multiple 
        //      mysql instances should specify the location to be safe.
        // database_socket:  "/var/run/mysqld/mysqld.sock",

        // database_hostport:  "<hostname>:<port>"
        //      When using the "host:port" connection type, this value specifies the host
        //      and port to connect to.  By default, this is "localhost:3306" and shouldn't  
        //      need to change when monitoring the local machine.  Allowed values are
        //      "default", "<host>" to specify only the hostname, or the full pair
        //      "<host>:<port>"
        // database_host:  "localhost:3306",
   
        // database_username:  "<username>"
        //      This value is REQUIRED and is the mysql username that has sufficient 
        //      privileges to run the required queries -- typically admin leve.
        database_username: "root",
   
        // database_password:  "<password>"
        //      This value is REQUIRED and is the password associated with the username
        //      specified above.
        database_password: "password"
    }
  
  
MySQL Monitor Data Categories
  
In addition to the derived statistics discussed above, the monitor emits additional data that may be of use.  The categories of the data generated are as follows:
  
- mysql.global
    These values are the output of the "SHOW GLOBAL STATUS" query.  Within MySQL documentation, the values emitted are typically discussed in the MySQL documentation in the chapter titled "Server Status Variables".
    
- mysql.innodb
    If the MySQL configuration has the InnoDB engine configured, stats about InnoDB usage will be emitted under this category.  The discussion of InnoDB engine information is discussed within the MySQL documentation under the chapter titled "SHOW ENGINE INNODB STATUS and the InnoDB Monitors".
    
- mysql.process
    The result of processing the data from "SHOW PROCESSLIST".  The data shows the types of commands being run and the number of threads performing each.
    
- mysql.vars
    These values are the current configuration for the MySQL server.  Most of these values reflect the default values set or those loaded from the MySQL configuration file.  Over a particular run of the MySQL instance, these values likely will not change.  A discussion of what each of the values is can be found in the MySQL documentation in the chapter titled "Using System Variables".
    
- mysql.slave
    If your MySQL instance is configured as a slave server, the values from "SHOW SLAVE STATUS" are under this category.  MySQL documentation discusses the values here under the chapter titled "Checking Replication Status".