# Copyright 2014-2023 Scalyr Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This script generates yml file for the cacheable steps workflow.
For each stage it creates GitHub Actions job where steps of this stage has to run.

"""

import copy
import sys
import pathlib as pl

import strictyaml

# This file can be executed as script. Add source root to the PYTHONPATH in order to be able to import
# local packages. All such imports also have to be done after that.
SCRIPT_PATH = pl.Path(__file__).absolute()
SOURCE_ROOT = SCRIPT_PATH.parent.parent.parent.parent
sys.path.append(str(SOURCE_ROOT))

from tools.cicd.cacheable_steps import step_stages, SKIPPED_STAGE_JOB_NAME


def generate_workflow_yaml():
    template_path = SCRIPT_PATH.parent / "reusable-run-cacheable-runner-steps-template.yml"
    template_ymp = strictyaml.load(template_path.read_text())
    workflow = template_ymp.data

    jobs = workflow["jobs"]

    stage_job_template = jobs.pop("stage")

    pre_job_outputs = {}
    for counter in range(len(step_stages)):
        stage_job = copy.deepcopy(stage_job_template)
        stage_job_name = f"stage_{counter}"

        stage_matrix_output_name = f"stage_matrix{counter}"
        stage_matrix_output_value = f"${{{{ steps.get_missing_steps_matrices.outputs.{stage_matrix_output_name} }}}}"
        pre_job_outputs[stage_matrix_output_name] = stage_matrix_output_value

        stage_skip_output_name = f"stage_skip{counter}"
        stage_skip_output_value = f"${{{{ steps.get_missing_steps_matrices.outputs.{stage_skip_output_name} }}}}"
        pre_job_outputs[stage_skip_output_name] = stage_skip_output_value

        if counter > 0:
            previous_stage_job_name = (
                f"stage_{counter - 1}"
            )
            # Next stage job can start only after previous stage job is finished.
            stage_job["needs"].append(
                previous_stage_job_name
            )

        # Add if statement that will skip the job if that is needed.
        stage_job["if"] = f"${{{{ needs.pre_job.outputs.{stage_skip_output_name} != 'true' }}}}"

        stage_job["name"] = f"{counter} ${{{{ matrix.name }}}}"

        # Add job matrix
        stage_job["strategy"][
            "matrix"
        ] = f"${{{{ fromJSON(needs.pre_job.outputs.{stage_matrix_output_name}) }}}}"

        jobs[stage_job_name] = stage_job

        for step in stage_job["steps"]:
            step["if"] = f"${{{{ matrix.name != '{SKIPPED_STAGE_JOB_NAME}' }}}}"

    pre_job = jobs["pre_job"]
    pre_job["outputs"] = pre_job_outputs

    workflow_path = SOURCE_ROOT / ".github/workflows/reusable-run-cacheable-runner-steps.yml"

    yaml_content = strictyaml.as_document(workflow).as_yaml()

    # Add notification comment, that this YAML was auto-generated.
    script_rel_path = SCRIPT_PATH.relative_to(SOURCE_ROOT)
    template_rel_path = template_path.relative_to(SOURCE_ROOT)
    comment = f"# IMPORTANT: Do not modify.\n" \
              f"# This workflow file is generated by the script '{script_rel_path}' from the template '{template_rel_path}'.\n" \
              f"# Modify those files in order to make changes to the workflow."

    yaml_content = f"{comment}\n{yaml_content}"
    workflow_path.write_text(yaml_content)


if __name__ == '__main__':
    generate_workflow_yaml()
