import copy
import sys
import pathlib as pl

import strictyaml

SCRIPT_PATH = pl.Path(__file__).absolute()
SOURCE_ROOT = SCRIPT_PATH.parent.parent.parent.parent
sys.path.append(str(SOURCE_ROOT))

from tools.cicd.cacheable_steps import step_stages, SKIPPED_STAGE_JOB_NAME


def generate_workflow_yaml():
    """
    This function generates yml file for workflow that run pre-built steps.

    """
    template_path = SCRIPT_PATH.parent / "reusable-run-cacheable-runner-steps-template.yml"
    template_ymp = strictyaml.load(template_path.read_text())
    workflow = template_ymp.data

    jobs = workflow["jobs"]

    stage_job_template = jobs.pop("stage")

    pre_job_outputs = {}
    for counter in range(len(step_stages)):
        stage_job = copy.deepcopy(stage_job_template)
        stage_job_name = f"stage_{counter}"

        stage_matrix_output_name = f"stage_matrix{counter}"
        stage_matrix_output_value = f"${{{{ steps.print_missing_caches_matrices.outputs.{stage_matrix_output_name} }}}}"
        pre_job_outputs[stage_matrix_output_name] = stage_matrix_output_value

        stage_skip_output_name = f"stage_skip{counter}"
        stage_skip_output_value = f"${{{{ steps.print_missing_caches_matrices.outputs.{stage_skip_output_name} }}}}"
        pre_job_outputs[stage_skip_output_name] = stage_skip_output_value

        if counter > 0:
            previous_stage_job_name = (
                f"stage_{counter - 1}"
            )
            stage_job["needs"].append(
                previous_stage_job_name
            )

        stage_job["if"] = f"${{{{ needs.pre_job.outputs.{stage_skip_output_name} != 'true' }}}}"

        stage_job["name"] = f"{counter} ${{{{ matrix.name }}}}"
        stage_job["strategy"][
            "matrix"
        ] = f"${{{{ fromJSON(needs.pre_job.outputs.{stage_matrix_output_name}) }}}}"

        jobs[stage_job_name] = stage_job

        for step in stage_job["steps"]:
            step["if"] = f"${{{{ matrix.name != '{SKIPPED_STAGE_JOB_NAME}' }}}}"

    pre_job = jobs["pre_job"]
    pre_job["outputs"] = pre_job_outputs

    workflow_path = SOURCE_ROOT / ".github/workflows/reusable-run-cacheable-runner-steps.yml"

    yaml_content = strictyaml.as_document(workflow).as_yaml()

    # Add notification comment, that this YAML was auto-generated.

    script_rel_path = SCRIPT_PATH.relative_to(SOURCE_ROOT)
    template_rel_path = template_path.relative_to(SOURCE_ROOT)
    comment = f"# IMPORTANT: Do not modify.\n" \
              f"# This workflow file is generated by the script '{script_rel_path}' from the template '{template_rel_path}'.\n" \
              f"# Modify those files in order to make changes to the workflow."

    yaml_content = f"{comment}\n{yaml_content}"
    workflow_path.write_text(yaml_content)


if __name__ == '__main__':
    generate_workflow_yaml()
